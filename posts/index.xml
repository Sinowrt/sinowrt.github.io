<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sinowrt</title>
    <link>http://blog.sinowrt.cn/posts/</link>
    <description>Recent content in Posts on Sinowrt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 May 2022 21:45:00 +0800</lastBuildDate>
    
	<atom:link href="http://blog.sinowrt.cn/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>巧用IOS的BLE实现上下班打卡提醒（Python实现）</title>
      <link>http://blog.sinowrt.cn/2022/2022-05-03t2145-using-ios-ble-to-remind-me-clock-inpython-implement/</link>
      <pubDate>Tue, 03 May 2022 21:45:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2022/2022-05-03t2145-using-ios-ble-to-remind-me-clock-inpython-implement/</guid>
      <description>0x00 背景 因为公司使用刷脸打卡，这就导致有时候打了卡，却突然失忆，忘了自己有没有打卡；或者直接就忘了打卡，并且也忘了自己有没有打卡。这几种情况都实实在在发生过的，上个班还要时时刻刻去回忆有没有打卡实在是非常痛苦的一件事。所以一直就想做一个提醒打卡的小程序。
0x01 设想的几种方案 第一种方案，是基于IOS快捷指令的自动化功能，设置到达或者离开目的地的提醒，但是这个自动化的方式非常鸡肋，一个是触发之后，还要手动点运行；二是到达或离开目的地根本就不提醒，反而是每次走到定位地址外的一个准确位置，反而又会准确提醒，不知道是不是地图位置有偏移还是咋滴。
第二种方案是想起之前阿里公众号中的一篇文章，就讲到在外卖取餐的场景中，如何准确识别外卖小哥到店取餐的解决方案，这给了我很大的启发，该场景跟我上下班的场景很是契合，只要在到店（到公司上班）识别的基础上，加上离店（下班回家）识别的功能即可。开干！
0x02 资料收集 遵循不重复造轮子原则，我首先在网上搜集了一下相关的信息，看看有没有现成的方案。
首先在知乎找到了《总是忘打卡？用iBeacon提醒你！》这篇文章，作者在万能淘宝上购买的iBeacon信标，使用Python搭配pybluez库探测iBeacon信号，根据iBeacon信号的消失或者出现来判断作者上班与下班的状态。
但是据了解，iPhone是会持续向外发射BLE信号的，既然有现成的信号源，就不用买万能淘宝的iBeacon信标了。
因为iPhone的BLE广播的是随机地址，那么要如何唯一确定该随机地址是我的设备呢? 首先我们要知道随机地址是什么意思，随机地址是蓝牙核心规范中的一个词条，那么在蓝牙核心规范中必然会有&amp;rdquo;随机地址&amp;rdquo;的定义和描述，附上蓝牙核心规范5.3下载链接。
0x03 实现方案 根据蓝牙核心规范5.3中[Vol 6] Part B, Section 1.3.2.3的描述，可解析随机地址（iPhone BLE使用的正是可解析随机地址）可以使用设备配对过程中产生的IRK进行解析
 将IRK以及随机地址的前24位prand作为输入，然后prand需要补齐128位变为r&amp;rsquo; 使用[Vol 3] Part H, Section 2.2.2的ah哈希函数，进行ah(IRK,r&amp;rsquo;)，ah函数实际上就是NIST Publication FIPS-197中描述的AES-128加密，IRK作为key，r&amp;rsquo;作为plaintext 取ah哈希运算结果的最后24位，跟随机地址的后24位进行比较，若一样则可判断为同一设备。  0x04 运行环境的选择 我脑海中最先想到的是树莓派，作为一个wifi 蓝牙 有线功能完备，软件支持完整，即插即用，并且技术成熟的ARM设备，确实是实现各种小功能的首选设备。
等等，为什么不在windows中实现呢？我的办公电脑又是24小时开机的，少维护一个设备多香啊。但是在实现的过程中发现pybluez的库在windows平台上并不支持BLE。。。但是万能的GayHub说：pybluez不行我这还有pysimpleble，尽管文档少，又不是不能用对吧。
0x05 获取IRK 既然随机地址是根据IRK来解析的，那首先就要获取到一个IRK。
首先，需要一个支持BLE的蓝牙适配器（我两台电脑蓝牙适配器可能因为不支持BLE配对，只能获取到Linkkey），以及Win10系统环境。
将电脑与手机进行配对，配对完成后，打开设备管理器，找到iPhone的蓝牙LE设备，打开属性窗口的事件选项卡，在信息栏记录蓝牙LE设备的设备号（如图5.1）
下载PsTools解压,使用管理员权限打开CMD，cd到解压好的PsTools根目录，执行命令
# 64位操作系统执行以下命令 PsExec64.exe -si regedit # 32位操作系统执行以下命令 PsExec.exe -si regedit  执行命令后会打开注册表窗口，在左侧找到HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\BTHPORT\Parameters\Keys\目录(如图 5.2)
第一层目录是本机蓝牙Mac地址，在第二层目录中找到设备管理器中记录下的设备号，点击该目录，记录右侧窗口的IRK秘钥串
PS：如果有 ESP32 开发板，可以烧录Decoding-Random-Bluetooth-Address项目的get_irk - esp32_irk.ino，再使用手机跟ESP32配对，在串口监视器中即可看到打印出来的IRK。
另外，Decoding-Random-Bluetooth-Address这个项目中的nrf_ble_add文件夹中，有C语实现的程序，可以用来研究随机地址与irk匹配的具体算法，我仅参考了ah函数的具体实现过程，因为项目跑起来的发现随机地址和irk的匹配结果不对。
0x06 位置判断实现篇 ## 随机地址校验器 class RandomAddressValidator(object): def __init__(self): self.</description>
    </item>
    
    <item>
      <title>Python 3.10.04 环境下使用 pip install pybluez 的若干报错</title>
      <link>http://blog.sinowrt.cn/2022/2022-04-30t1807-several-errors-while-installing-pybluez-with-pip-python-version-3.10.04/</link>
      <pubDate>Sat, 30 Apr 2022 18:07:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2022/2022-04-30t1807-several-errors-while-installing-pybluez-with-pip-python-version-3.10.04/</guid>
      <description>0x00 背景 准备在Win10使用python做蓝牙功能开发，安装了最新的Python 3.10.04，然后在Pycharm中新建工程，指定venv环境为Python 3.10.04。在使用pip安装pybluez包的时候，报了若干个Error，就写篇Blog记录一下，给大家做参考。
0x01 报错及解决过程 第一个报错为：error in pybluez2 setup command: use_2to3 is invalid.
原因：高版本的setuptools中不再使用use_2to3 解决方法：File &amp;gt; Settings &amp;gt; Project:xxxx &amp;gt; Python Interpreter 的Package中 将 setuptools 版本降到58以下即可
第二个报错为：LINK : fatal error LNK1181: cannot open input file &#39;Irprops.lib&#39; 原因：Windows Kit中删除了irprops.lib，链接到 irprops.lib 的应用可直接改为链接到 bthprops.lib 解决方法： 根据编译命令，找到Windows Kit的位置：
C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Tools\MSVC\14.16.27023\bin\HostX86\x64\link.exe /nologo /INCREMENTAL:NO /LTCG / DLL /MANIFEST:EMBED,ID=2 /MANIFESTUAC:NO /LIBPATH:E:\mcp\WorkPal\venv\libs /LIBPATH:D:\Program Files\Python\Python_310\libs /LIBPATH:D:\Program Fil es\Python\Python_310 /LIBPATH:E:\mcp\WorkPal\venv\PCbuild\amd64 /LIBPATH:C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Tools\MS VC\14.</description>
    </item>
    
    <item>
      <title>pip install WinError 10061解决方法</title>
      <link>http://blog.sinowrt.cn/2022/2022-04-26t2103-how-to-solve-pycharm-pip-install-winerror-10061/</link>
      <pubDate>Tue, 26 Apr 2022 21:03:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2022/2022-04-26t2103-how-to-solve-pycharm-pip-install-winerror-10061/</guid>
      <description>0x00 解决过程 今晚在pycharm的terminal中更新pip版本的时候，遇到下面的报错：
WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by &#39;ProxyError(&#39;Cannot connect to proxy.&#39;, NewConnectionError(&#39;&amp;lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x0000011051C02790&amp;gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&#39;))&#39;: /pypi/simple/pip/  无论下载什么包都是报10061的Error。
查了网上全是关系统代理呀，关浏览器代理呀，全试了一遍都没用，pycharm的代理也找了一遍都没发现问题，重启pycharm重启电脑都没用。
后面还是修改注册表解决了，修改过程如下：
Win+R键，输入regedit回车打开注册表，打开计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings，找到ProxyEnable表项，修改数值数据为0，点击确定即可。
无需重启，直接打开pycharm的terminal，可以正常更新pip了。</description>
    </item>
    
    <item>
      <title>树莓派 ubuntu server 20.04启用蓝牙功能</title>
      <link>http://blog.sinowrt.cn/2022/2022-04-25t1936-raspberry-pi-how-to-enable-bluetooth-on-ubuntu-server-20.04/</link>
      <pubDate>Mon, 25 Apr 2022 19:36:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2022/2022-04-25t1936-raspberry-pi-how-to-enable-bluetooth-on-ubuntu-server-20.04/</guid>
      <description> 0x00 解决过程 #安装bluetoothctl sudo apt-get install pi-bluetooth #配置设备，如果遇到配置超时，重试即可，输出Device setup complete说明配置成功 sudo hciattach /dev/ttyAMA0 bcm43xx 921600 nowflow - #运行bluetoothctl sudo bluetoothctl #启动蓝牙 power on #可被发现 discoverable on #搜索设备 scan on #配对 pair 设备地址 #连接 connect 设备地址  </description>
    </item>
    
    <item>
      <title>在ubuntu20.04中编译OpenJDK7</title>
      <link>http://blog.sinowrt.cn/2022/2022-04-17t2030-how-to-compile-openjdk7-on-ubuntu20.04/</link>
      <pubDate>Sun, 17 Apr 2022 20:30:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2022/2022-04-17t2030-how-to-compile-openjdk7-on-ubuntu20.04/</guid>
      <description>0x00 编译环境 系统：ubuntu20.04
目标JDK：openjdk7
Bootstrap JDK：Java SE Development Kit 7u4
Ant：apache-ant-1.9.16
Freetype：freetype-2.3.0
gcc/g++版本：gcc-4.9/g++-4.9
0x01 环境配置 安装依赖包
sudo apt-get install build-essential gawk m4 libasound2-dev libcups2-dev libxrender-dev xorg-dev xutils-dev binutils libmotif-dev  安装Freetype
将下载的软件包解压出来，进入根目录
./configure sudo make sudo make install  配置环境变量，可以将以下代码保存到一个文件中，使用source命令，source该文件环境变量即设置成功：
#语言选项，这个必须设置，否则编译好后会出现一个HashTable的NPE错 export LANG=C #Bootstrap JDK的安装路径。必须设置 export ALT_BOOTDIR=/home/sinowrt/Documents/jre1.7.0_04 #允许自动下载依赖 export ALLOW_DOWNLOADS=true #并行编译的线程数，设置为和CPU内核数量一致即可 export HOTSPOT_BUILD_JOBS=4 export ALT_PARALLEL_COMPILE_JOBS=4 #比较本次build出来的映像与先前版本的差异。这对我们来说没有意义， #必须设置为false，否则sanity检查会报缺少先前版本JDK的映像的错误提示。 #如果已经设置dev或者DEV_ONLY=true，这个不显式设置也行 export SKIP_COMPARE_IMAGES=true #使用预编译头文件，不加这个编译会更慢一些 export USE_PRECOMPILED_HEADER=true #要编译的内容 export BUILD_LANGTOOLS=true #export BUILD_JAXP=false #export BUILD_JAXWS=false #export BUILD_CORBA=false export BUILD_HOTSPOT=true export BUILD_JDK=true #要编译的版本 #export SKIP_DEBUG_BUILD=false #export SKIP_FASTDEBUG_BUILD=true #export DEBUG_NAME=debug #把它设置为false可以避开javaws和浏览器Java插件之类的部分的build BUILD_DEPLOY=false #把它设置为false就不会build出安装包。因为安装包里有些奇怪的依赖， #但即便不build出它也已经能得到完整的JDK映像，所以还是别build它好了 BUILD_INSTALL=false #这两个环境变量必须去掉，不然会有很诡异的事情发生（我没有具体查过这些&amp;quot;诡异的 #事情&amp;quot;，Makefile脚本检查到有这2个变量就会提示警告） unset JAVA_HOME unset CLASSPATH # ==============【以下是我的个性化环境配置，可以按需设置】==================== #设置freetype路径 export ALT_FREETYPE_HEADERS_PATH=/usr/local/include export ALT_FREETYPE_LIB_PATH=/usr/local/lib #设置Ant路径 export PATH=/home/sinowrt/Documents/apache-ant-1.</description>
    </item>
    
    <item>
      <title>如何在Ubuntu20.04中安装VMware tools</title>
      <link>http://blog.sinowrt.cn/2022/2022-04-17t2024-how-to-install-vmware-tools-on-ubuntu20.04/</link>
      <pubDate>Sun, 17 Apr 2022 20:24:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2022/2022-04-17t2024-how-to-install-vmware-tools-on-ubuntu20.04/</guid>
      <description>0x00 背景 在vmware中装了Ubuntu 20.04之后，要实现虚拟机和宿主机之间的文件或字符串拷贝，必须安装vmware tools。
0x01 安装过程 sudo apt-get update sudo apt-get install open-vm-tools-desktop -y sudo reboot</description>
    </item>
    
    <item>
      <title>修复echart数据不显示的问题————暨解决tomcat默认编码导致后端接收urlencode参数乱码的问题</title>
      <link>http://blog.sinowrt.cn/2022/2022-04-01t1431-decode-issue-while-deployed-with-tomcat/</link>
      <pubDate>Fri, 01 Apr 2022 14:31:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2022/2022-04-01t1431-decode-issue-while-deployed-with-tomcat/</guid>
      <description>0x00 背景 最近收到一个开发任务，虽然是新系统，但是技术架构非常老，是使用tomcat进行部署的（这句话要记好，后面会考的）。 这个系统原本外包团队已经开发好了，在公司测试环境中跑起来的时候，echart却不加载，那么我就来看看是什么问题。
0x01 过程一 首先是将项目基本环境搭建起来，因为我的移动电脑访问不到公司内网数据库，在这里还用Goproxy搭建了一个代理服务，移动电脑通过代理服务间接连到数据库。 项目跑起来之后，通过console调试大法，发现后端是有返回数据的，但是到了echart中却显示不出来。
既然这样，那就console.log一下echart，看看里面的data是啥，有没有跟后端返回的结果匹配起来。 结果发现后端返回的是广东省或者广西壮族自治区等全称，但是前端的data中就只显示各个省份的简称：广东、广西等。
既然数据集有了，也比较固定，那么就在前端建立一个映射字典，将后端返回的值进行简称映射替换之后，就可以正常匹配上了。
这里还有另一个办法，就是在echart的option中新增一个nameMap，将映射关系加上，也能正常匹配，但是由于映射名称之后，各省份的名称比较长，有些重叠有些错位，于是就不适用在option中添加nameMap的方法。
在经过上面的处理之后，地图中的数据也能正常显示了。
0x01 过程二 除了过程一中的地图显示问题之外，在该地图下方还有一个对应点击对应省份，放大该省可以显示各区域的数据的功能。首先是地图也默认加载不出来，经排查之后，确认是url拼接有问题，更正之后就可以发送数据请求了，但是请求返回的是无数据。 又经过一番仔细排查，确认是查询省份的时候，传到后端的是“广东”，而非全称“广东省”，这个好办，还是跟上面一样，加一个映射表，在发送请求的时候，将查询参数通过映射表映射为全称即可查到数据。
加了映射表之后，发现还是查不到！看了后端的日志，发现参数是乱码，我想了下，之前我也调整了tomcat的日志显示编码，也添加了-Dfile参数，日志显示这一块应该是没问题了。那么就只有前端发送请求时没有指定编码或者后端解析参数的时候跟前端编码不一致的问题了，于是在前端指定了content-type的encoding参数，但是发现还是乱码。在后端的requestmapping中指定解码编码也不行。
好家伙，实在没辙了，那就复制乱码，随便百度一个乱码查询的网站，发现原字符编码是UTF-8，解析编码是iso8859-1的时候，是能够还原回“广东省”的，于是线索又回到了tomcat。
查了一下资料，发现问题就是出现在tomcat上，如果在server.xml中未指定解析编码的话，tomcat默认编码就是iso-8859-1。
原因找到了，咱打开tomcat根目录下的conf文件夹，找到server.xml文件，将connector指定编码
&amp;lt;Connector port=&amp;quot;8080&amp;quot; protocol=&amp;quot;HTTP/1.1&amp;quot; connectionTimeout=&amp;quot;20000&amp;quot; redirectPort=&amp;quot;8443&amp;quot; /&amp;gt;  修改为：
&amp;lt;Connector useBodyEncodingForURI=&amp;quot;true&amp;quot; URIEncoding=&amp;quot;UTF-8&amp;quot; port=&amp;quot;8080&amp;quot; protocol=&amp;quot;HTTP/1.1&amp;quot; connectionTimeout=&amp;quot;20000&amp;quot; redirectPort=&amp;quot;8443&amp;quot; /&amp;gt;  之后，重启tomcat即可。
0x01 过程三 虽然解决了前端传值到后端的乱码问题，但是后面我发现，后端传回浏览器的开发人员工具中的值竟然也显示乱码。
这又是咋回事呢？ 仔细看了一下，发现是后端返回的时候，response中的header并未携带编码信息，浏览器无法识别到编码，就使用默认的windows-1252进行解析，就产生了乱码的问题，虽然传到前端是正常的，但是为了方便后面上线之后的调试，还是到后端指定了Content-Type的header，指定之后，就正常啦。</description>
    </item>
    
    <item>
      <title>在windows server 2019中部署git服务端</title>
      <link>http://blog.sinowrt.cn/2022/2022-03-28t2024-deploy-a-git-service-on-windows/</link>
      <pubDate>Mon, 28 Mar 2022 20:24:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2022/2022-03-28t2024-deploy-a-git-service-on-windows/</guid>
      <description>0x00 背景 最近公司有些文件需要共享，协同编辑，建一个共享文件夹吧，又太糙了，如果能够记录下文件的修改记录就更好了，于是我想到了搭建一个git私服，开干。
0x01 环境介绍 系统环境：windows server 2019
软件包：gogs、git for windows
0x02 部署过程 先安装git for windows，我这里下载的是安装版，傻瓜式安装即可。
将下载的gogs压缩包解压出来，cmd进入根目录，直接运行./gogs web
gogs默认是监听了本地3000端口，打开浏览器打开http://localhost:3000/install进行初始化配置
配置挺简单的，特别说一下设置数据库类型（选SQLite3即可，选其他数据库需要另外安装），其他按需设置即可
配置完成之后打开http://localhost:3000/即可进入gogs的web界面
如果需要开放到外网，在防火墙放行端口即可。</description>
    </item>
    
    <item>
      <title>使用socks5代理绕过防火墙安全策略</title>
      <link>http://blog.sinowrt.cn/2022/2022-03-27t2231-bypass-firewall-security-policies-using-a-proxy/</link>
      <pubDate>Sun, 27 Mar 2022 22:31:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2022/2022-03-27t2231-bypass-firewall-security-policies-using-a-proxy/</guid>
      <description>0x00 背景 公司不让使用向日葵远程了，在防火墙屏蔽了向日葵，原本可以使用frp穿透的，奈何防病毒软件又太给力了，刚下载下来就被强制删掉，关又关不掉，并且公司电脑是win10家庭版，阉割了远程桌面功能，这个方案就直接pass掉了。由于手头上有空闲的vps，于是转而想到搭建socks5代理服务器，再配置向日葵使用代理连接外网就好了。
0x01 前期准备 1.国内VPS一台（保证网络更好更稳定）
2.goproxy
0x02 服务端搭建 根据系统平台下载对应版本的goproxy，我下载的是windwos版本的，下载后解压进入软件根目录，根据说明文档，运行命令proxy socks -t tcp -p &amp;quot;0.0.0.0:38080&amp;quot; -g &amp;quot;公网地址&amp;quot;--udp-port 0 --udp，启动服务。（记得放行防火墙端口）
0x03 向日葵连接代理服务器 打开向日葵网络设置，配置代理地址及端口，测试提示连接成功即可保存。
0x04 总结 至此，整个代理配置已经完成了，过程难点主要在寻找合适的代理软件，在github上面搜搜star多的项目保证没错。（ps：goproxy太好用了，还跨平台，强推！）</description>
    </item>
    
    <item>
      <title>在树莓派（ARM）上面运行hpool的chia挖矿程序（AMD64）</title>
      <link>http://blog.sinowrt.cn/2021/2021-04-23t1847-how-to-run-chia-miner-of-hpool-on-raspberry-pi4/</link>
      <pubDate>Fri, 23 Apr 2021 18:47:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-04-23t1847-how-to-run-chia-miner-of-hpool-on-raspberry-pi4/</guid>
      <description>0x00 背景 最近chia挖矿可太火了，可惜我运气太差，一个币都没挖到，算了还是直接加入矿池吧。可是硬盘容量已经p完了，用台式机挂机的话，怕是电费都不够亏吧。
之前在chia的wiki上面，我看到了一个用Rock PI4b组装的矿机，很是心动。可惜Rock pi的生态比Raspberry pi逊色很多，而我又不使用官方软件进行耕种，到时各种适配起来可是个麻烦事。所以，在对比之下我还是选择了Raspberry Pi4B。
0x01 硬件准备 1. 一块树莓派Raspberry Pi4B 2. sata转usb3.0的易驱线（带12v供电端口的）我选择的是绿巨能的，便宜好用 3. ATX电源一个（根据你硬盘的数量来选择功率）我这里用的是家里闲置的200W 长城电源 4. 大4Pin接口转3.5mm 12V DC接口 转接线若干条 0x02 兜兜转转（仅记录过程 解决方案可以直接看下一节） 将可执行文件上传到树莓派上面，直接运行的时候 会提示Exec Format Error，因为树莓派是ARM架构的，而可执行文件是AMD64架构的。
可执行文件的信息可以使用file 可执行文件查看，如hpool-miner-chia这个可执行文件的信息就是：
ubuntu@ubuntu:~/linux$ file ./hpool-miner-chia ./hpool-miner-chia: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, Go BuildID=or4EJC7edY1jm53BAfGR/s_m3PpAuyo9gsjpS3x4h/Eg54hBo5Pfw4tHBF5qZ0/g1_NAK8AbL3R_FIeKSr6, stripped  也可以使用readelf命令查看，如readelf -h python，得到的是ELF Header中的项Magic，第五个数 02时为64位，01时为32位。
1. box86方案 第一次尝试是在raspberry os上面安装box86，但是运行的时候发现box86并不支持64位可执行文件，遂作罢。
2. exagear方案 这个方案并未尝试，因为exagear 跟box86一样，只支持32位的可执行文件。
3. qemu方案 使用sudo apt-get install qemu-user命令安装qemu-user，这个命令会自动安装qemu-user和binfmt，binfmt会通过判断可执行文件的类型，自动选择是否通过qemu来执行该文件。</description>
    </item>
    
    <item>
      <title>如何将群晖的软件包和资料转移到另一个硬盘</title>
      <link>http://blog.sinowrt.cn/2021/2021-04-22t1330-how-to-move-the-package-and-documents-in-synology-to-another-hard-disk/</link>
      <pubDate>Thu, 22 Apr 2021 13:30:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-04-22t1330-how-to-move-the-package-and-documents-in-synology-to-another-hard-disk/</guid>
      <description>0x00 背景 最近网上刮起了chia风，由于手上也有大容量硬盘，但是挂在群晖上做存储盘，于是想将这个盘腾出来，将资料转移到另一个硬盘中。
0x01 过程 1. 添加新硬盘 首先需要准备一个完全擦除的硬盘，将群晖关机后，将该硬盘接入群晖。启动群晖之后，打开Storage Manager新建一个raid group（我原来是用单盘建立的basic raid group），建立好后再新建一个Volume，如果勾选了全盘扫描的话，需要等待一段时间才能建好。
2. 转移资料 资料的转移比较简单，打开Control Panel - Shared Folder，选择需要转移的共享文件夹，点击Edit，再Location下拉框中选择新建的Volume即可自动转移。
3. 转移package 转移package需要用到一个软件MODS Package Manager，我在https://www.beatificabytes.be/sspks 上面下载下来，再在Package Center中手动上传安装的。
在打开Package Manager的时候遇到白屏的问题，原因是该软件的一个JS需要从谷歌下载，打开fq软件代理一下即可解决。（如果没有fq条件的话，也可以参照这篇博客 改成国内可以访问的cdn即可解决） 软件的使用很简单，选择需要移动的package，然后选择目标Volume，点击Move Package即可。 有些软件在转移过程中会失败，套件没有移动成功，可以不用管它。打开Package Center，会提示该套件错误无法运行，这时候点击修复即可完成套件的转移了。
4. 转移Moments里面的照片 Moments的照片是存在/homes 共享目录中的，所以只要将该共享目录按步骤2进行转移即可，这一步也可以在Control Panel - User - User Home - Location的下拉框选择转移到新卷。需要特别注意的是Drive的数据库的转移，打开Drive Admin Console - Settings - Database Location 选择转移到目标卷中即可。（在群晖的官网中又说到，在Storage Manager安全地移除Volume也可以转移数据库，但我选择稳妥一点，手动转移）
5. 安全移除卷 最后一步，我是直接关机，将旧盘直接摘下，然后开机看看有没有什么异常，确保数据都安全地转移到了新卷。
最后再将旧盘装上，在Storage Manager中安全地移除卷，将旧盘取下来。
0x02 遇到的问题 在转移资料的第4步中，我没有转移Drive的数据库，直接摘下了硬盘，并启动了群晖，在package center上面修复了Drive 和 Moments，导致Moments不可用。
最后还是将旧盘装上，在Drive Admin Console中转移了数据库，然后将Moments套件连同数据库一起删除，再重装才解决了问题。 这样的话，就丢失了之前Moments索引的信息，没关系直接再索引一遍就好了。</description>
    </item>
    
    <item>
      <title>用python下载七牛云的图片并批量重命名</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-10t1451-using-python-to-download-pictures-from-qiniu-and-batch-rename/</link>
      <pubDate>Wed, 10 Mar 2021 14:51:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-10t1451-using-python-to-download-pictures-from-qiniu-and-batch-rename/</guid>
      <description>0x00 背景 最近想要搭建一个对象存储服务，并把原本在七牛云上面的图片全部转移到该服务中管理，但是七牛云上面的图片命名本来就很乱，不符合批量管理的要求，所以不能从七牛云直接下载，而是要把图片名格式化一下，再下载下来，这种工作，用python是最适合不过了，于是就有了这篇文章。
0x01 过程 1. 命名规则转换 原本图片的命名是images/1979-01-01T0000/1.png这样的格式，现在要统一放在一个文件夹，所以需要去掉images文件夹，并把时间和图片名通过&amp;rdquo;-&amp;ldquo;拼接起来。
2. 将七牛云上面的文件名及其对应的url列表导出 这一步可以直接在七牛云上面批量操作，导出的文件是是csv格式的，所以在python中可以使用csv库直接进行读取
3. 编写代码 import requests import csv def download_img(img_url, api_token, name): print (img_url) header = {&amp;quot;Authorization&amp;quot;: &amp;quot;Bearer &amp;quot; + api_token} # 设置http header，视情况加需要的条目，这里的token是用来鉴权的一种方式 r = requests.get(img_url, headers=header, stream=True) print(r.status_code) # 返回状态码 if r.status_code == 200: open(&#39;C:\\Users\\Jacky\\Pictures\\blogpic\\&#39; + name, &#39;wb&#39;).write(r.content) # 将内容写入图片 print(&amp;quot;done&amp;quot;) del r if __name__ == &#39;__main__&#39;: api_token = &amp;quot;apitoken&amp;quot; record = csv.reader(open(&#39;urls&#39;, &#39;r&#39;, encoding=&#39;utf-8-sig&#39;)) for i in record: name = i[0] # 改名 name = name[7:].</description>
    </item>
    
    <item>
      <title>用docker安装minio对象存储服务</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-09t2224-how-to-install-minio-with-docker/</link>
      <pubDate>Tue, 09 Mar 2021 22:24:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-09t2224-how-to-install-minio-with-docker/</guid>
      <description>0x00 背景 博客里面的图片之前使用的是七牛云的对象存储，用http协议传输的，自chrome更新之后就出现了强制跳转https的问题，而用新版edge还是可以打开的，但是今天我突然发现edge也不好使了，都会强制跳转https。而七牛云里面的https是收费的，既然我有服务器，有域名那就物尽其用搭一个对象存储服务吧。
0x01 过程 由于我的机器之前已经安装了docker，docker的安装过程就不赘述了，咱们直接从minio安装说起。
1. 首先把minio的镜像拉下来 docker pull minio/minio
2. 创建docker-compose.yml文件,写入以下内容 version: &#39;3.1&#39; services: minio: image: minio/minio container_name: minio restart: always ports: - 9000:9000 command: server /data #指定容器中的目录 /data environment: MINIO_ACCESS_KEY: minio #管理后台用户名 MINIO_SECRET_KEY: minioxxx #管理后台密码，最小8个字符 volumes: - ./data:/data #映射当前目录下的data目录至容器内/data目录 - ./config:/root/.minio/ #映射配置目录  3. 配置证书 在腾讯云上面申请了免费的证书，解压后将Apache中的xx.crt和xx.key文件分别改名为public.crt和private.key后放到minio的config/cert文件夹中。
4. 以deamon模式启动minio服务 docker-compose up -d
5. 配置访问策略 网页登录minio，然后新建一个bucket，点击新建的bucket右边三个点，点击Edit policy，prefix填入*，由于该bucket是用作博客的图床的，所以策略选择read only，最后点击Add即可。
0x02 遇到的问题 1. 浏览器提示ERR_CERT_COMMON_NAME_INVALID错误 这个错误是因为当时没有添加域名解析，直接使用了ip加端口访问，与证书里面的域名不匹配而提示的不安全连接问题。</description>
    </item>
    
    <item>
      <title>为什么挂载在docker容器中的配置文件在宿主机中修改后却没生效</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-09t1530-why-configuration-file-mounted-in-docker-has-no-effect-after-modified-in-host/</link>
      <pubDate>Tue, 09 Mar 2021 15:30:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-09t1530-why-configuration-file-mounted-in-docker-has-no-effect-after-modified-in-host/</guid>
      <description>0x00 背景 我想在服务器中使用nginx对不同子域名的网页进行分流，于是编辑nginx的配置文件，由于该配置文件从docker里面映射出来了，所以我就只在宿主机里面使用vim修改了配置文件，然后让容器执行命令docker exec -it containerID nginx -s reload，但是似乎没有生效，于是就有了这篇文章。
0x01 过程 使用命令进入容器里面查看，配置文件没有竟然还是之前的，没有被修改。于是，上去搜索了一下，发现这里面还真有坑。
问题原因： docker挂载文件时，并不是挂载了某个文件的路径，而是挂载了对应的文件，即挂载了linux指定的inode文件。
当使用vim之类的编辑器进行保存时，它不是直接保存文件，而是采用了备份、替换的策略，就是编辑时，是创建一个新的文件，在保存的时候，把备份文件替换源文件，这个时候文件的 inode 就发生了变化，而原来 inode 对应的文件其实并没有修改，也就是容器内的文件没有变化。当重启容器的时候，会挂载新的 inode。
0x02 总结 在docker中应该尽量挂载目录，避免挂载文件。</description>
    </item>
    
    <item>
      <title>如何解决cannot run bzip2: No such file or directory错误</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-09t0930-cannot-run-bzip2-no-such-file-or-directory/</link>
      <pubDate>Tue, 09 Mar 2021 09:30:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-09t0930-cannot-run-bzip2-no-such-file-or-directory/</guid>
      <description>0x00 错误描述 今天在使用tar解压文件的时候，报了一个错 cannot run bzip2: No such file or directory
0x01 解决方法 这个错误是因为系统中缺少bzip2，使用yum安装上就好了 yum -y install bzip2</description>
    </item>
    
    <item>
      <title>怎样查看linux版本</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-08t1833-how-to-check-the-linux-version/</link>
      <pubDate>Mon, 08 Mar 2021 18:33:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-08t1833-how-to-check-the-linux-version/</guid>
      <description> 0x00 相关命令 # 可显示电脑以及操作系统的相关信息 uname -a # 查看正在运行的内核版本 cat /proc/version # 查看发行版本信息 cat /etc/issue # 适用于所有的linux，包括Redhat、SuSE、Debian等发行版，但是在debian下要安装lsb lsb_release -a  </description>
    </item>
    
    <item>
      <title>navicat 连接 mysql数据库报错Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-08t1412-authentication-plugin-caching_sha2_password-cannot-be-loaded/</link>
      <pubDate>Mon, 08 Mar 2021 16:08:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-08t1412-authentication-plugin-caching_sha2_password-cannot-be-loaded/</guid>
      <description>0x00 错误描述 mysql数据库的版本是8.0.17，使用navicat连接的时候报错Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded
0x01 解决方法 因为我使用的navicat不支持caching_sha2_password的认证方式，只能在服务器暂时修改为mysql_native_password
// 登录Mysql(需要输入密码) mysql -u root -p // 选择数据库(这一步不可省略) use mysql // 查看plugin设置 select host, user, plugin from user; // 可以看到root的plugin是caching_sha2_password，我们希望改成mysql_native_password ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;xxxxx&#39;; ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;xxxxx&#39;; //使生效 FLUSH PRIVILEGES;  0x02 注意事项 在navicat连接完毕后，需要改回caching_sha2_password，否则后端连接的时候可能会出现问题。</description>
    </item>
    
    <item>
      <title>利用xshell将你vps的端口映射到本地主机</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-08t1608-how-to-forward-a-port-in-your-vps-with-xshell/</link>
      <pubDate>Mon, 08 Mar 2021 16:08:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-08t1608-how-to-forward-a-port-in-your-vps-with-xshell/</guid>
      <description> 0x00 背景 由于命令行管理mysql数据库太不方便了，如果能用navicat管理远程服务器该多好啊，于是就有了这篇文章。
0x01 过程 之前安装plex服务器的时候，就曾经用xshell把vps中plex服务器的端口映射回本地进行配置，那么数据库的端口啥的都是一样的，下面开始教学。
1. 把vps中的mysql服务端口映射到宿主机 由于我是使用了docker安装的mysql服务，所以需要将3306端口映射到宿主机，使用本地化安装的可以忽略这一步。
2. tunnel配置 打开xshell，在会话中选择目标vps，右键属性-连接-SSH-隧道，添加。
类型：本地拨出 //配置本地的连接 源主机：localhost 侦听端口：33066 //配置vps的连接 目标主机：localhost 目标端口：3306  确定保存。
3. 建立ssh连接之后，就可以打开navicat使用localhost:33066进行连接了。 </description>
    </item>
    
    <item>
      <title>在配置jd_seckill时如何获取eid与fp</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-07t1617-how-to-get-eid-and-fp-while-configurating-jd_seckill/</link>
      <pubDate>Sun, 07 Mar 2021 16:17:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-07t1617-how-to-get-eid-and-fp-while-configurating-jd_seckill/</guid>
      <description>0x00 背景 很久之前就知道有jd_seckill这个神器，但是一直没空弄，然后今天预约了显卡的抢购活动，就配置一下看看效果如何。
在项目的配置文件中有两个字段eid和fp，不知道在哪里获取，于是百度了一下就有了这篇文章。
0x01 如何获取 第一步：进入京东结算页面
第二步：f12打开Sources
第三步：右侧的watch，点击加号，填入_JdTdudfp
即可看到_JdTdudfp:Object</description>
    </item>
    
    <item>
      <title>failed to handler mux client connection 错误</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-05t1347-failed-to-handler-mux-client-connection/</link>
      <pubDate>Fri, 05 Mar 2021 13:47:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-05t1347-failed-to-handler-mux-client-connection/</guid>
      <description>0x00 错误描述 使用v2rayN连接节点的时候，总是会出现这个警告：
2021/03/05 13:45:52 [Warning] failed to handler mux client connection &amp;gt; v2ray.com/core/proxy/vmess/outbound: connection ends &amp;gt; v2ray.com/core/proxy/vmess/outbound: failed to read header &amp;gt; v2ray.com/core/proxy/vmess/encoding: failed to read response header &amp;gt; websocket: close 1000 (normal)  上网查了一圈，发现是节点时间与客户端时间不一致导致的。
0x01 解决方案 节点是基于ubuntu搭建的，所以下面将给出ubuntu设置时区的教程：
1. 运行tzselect,选择 Asia -&amp;gt; China -&amp;gt; Beijing。 root@KnobbyKindhearted-VM:~/v2ray-poseidon/docker/sspanel/ws-tls# tzselect Please identify a location so that time zone rules can be set correctly. Please select a continent, ocean, &amp;quot;coord&amp;quot;, or &amp;quot;TZ&amp;quot;. 1) Africa 2) Americas 3) Antarctica 4) Asia 5) Atlantic Ocean 6) Australia 7) Europe 8) Indian Ocean 9) Pacific Ocean 10) coord - I want to use geographical coordinates.</description>
    </item>
    
    <item>
      <title>sspanel 与 v2ray-poseidon 环境下如何搭建一个中转节点</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-05t1556-how-to-create-a-transit-node-base-on-sspanel-and-v2ray-poseidon/</link>
      <pubDate>Fri, 05 Mar 2021 13:47:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-05t1556-how-to-create-a-transit-node-base-on-sspanel-and-v2ray-poseidon/</guid>
      <description>0x00 背景 前两天搭建了个sspanel,后端主要使用v2ray-poseidon。之前没用面板的时候，一直是使用中转节点，安装nginx来反代节点，nginx 反代节点的教程前天也发出来了，大家有兴趣也可以看看。但是那篇文章只写道了如何反代节点，而没有提到如何将这种方式与sspanle搭配使用。
之前使用nginx反代节点的过程中，在sspanel遇到的问题主要是：在sspanel新建这个中转节点后，面板中总是显示灰色不可用状态，尽管将配置导入v2ray客户端是可用的。
这个问题困扰了我很久，今天突然就想通了，造成这个问题的主要原因是：面板的节点ID与这个落地节点的ID不匹配，因为落地节点也作为一个独立的节点导入到了面板中，而节点ID又是自增的无法重复设置，所以就会产生这样的问题。
0x01 解决过程 今天突然发现poseidon的教程中，有服务端多开v2ray的教程，于是我想，那我在这个节点开多一个v2ray实例就行啦！
1. 使用docker多开v2ray实例用于中转节点连接 1）复制目录
cd /root/v2ray-poseidon/docker/sspanel cp -a ws-tls ws-tls-2 cd ws-tls-2  2）修改config.json
配置nodeId为面板中新建的中转节点ID，然后将acceptProxyProtocol 选项值改为 true。
3） 修改docker-compose.yml
container_name:v2ray-ws-tls-2 ports 下面的端口改成其它端口，不然会和原 v2ray-poseidon 出现端口冲突
4） 启动
dc up -d
2. 中转节点配置 1）安装 HAProxy
yum -y install haproxy
2）修改HAProxy 配置文件
清空默认配置
echo &#39;&#39; &amp;gt; /etc/haproxy/haproxy.cfg  举例，现在我有个中转分配的端口为 20001，需要转发 v2ray.poseidon-gfw.cc
frontend sg1_frontend bind *:20001 default_backend sg1_server backend sg1_server server s1 sg1-test-trojanp.poseidon-gfw.cc:443 send-proxy  如果需要中转多个落地机，可以复制上面的内容，比如</description>
    </item>
    
    <item>
      <title>docker-compose 启动报错 read time out</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-04t2218-http-timeout-while-starting-docker-compose/</link>
      <pubDate>Thu, 04 Mar 2021 15:53:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-04t2218-http-timeout-while-starting-docker-compose/</guid>
      <description>0x00 现象 今晚在三毛中安装docker版的v2节点，在用docker-compose启动过程中，报了read time out 的错误，如下：
[root@ruvds-4ytfy ws-tls]# dc up -d Creating network &amp;quot;ws-tls_default&amp;quot; with the default driver Pulling v2ray-ws-tls (v2cc/poseidon:)... latest: Pulling from v2cc/poseidon ba3557a56b15: Pull complete d2371de70a8e: Pull complete e93b600e94e9: Pull complete Digest: sha256:627405b203b97a91d285dee998dbc8e4503b2dbe7e6fc7d1a788c81e2782f986 Status: Downloaded newer image for v2cc/poseidon:latest Creating v2ray-ws-tls ... ERROR: for v2ray-ws-tls UnixHTTPConnectionPool(host=&#39;localhost&#39;, port=None): Read timed out. (read timeout=60) ERROR: for v2ray-ws-tls UnixHTTPConnectionPool(host=&#39;localhost&#39;, port=None): Read timed out. (read timeout=60) ERROR: An HTTP request took too long to complete.</description>
    </item>
    
    <item>
      <title>使用Nginx代理ws&#43;tls的V2ray节点</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-03t1903-using-nginx-to-proxy-tls-ws-v2ray-node/</link>
      <pubDate>Wed, 03 Mar 2021 19:07:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-03t1903-using-nginx-to-proxy-tls-ws-v2ray-node/</guid>
      <description>0x00 背景 这两天给v2节点配上了ws+tls，但是直连的话速度还是不太理想，于是想用另一个vps中转一下，就有了这篇文章。
0x01 过程 虽然之前也用nginx中转过v2流量，但是从没中转过使用tls的节点，都是普通的使用ws节点而已。于是上网查了很多资料，都说直接配置nginx的证书，然后v2节点就取消tls就好了，但是我又希望有时能直连一下这个节点，如果不配置tls的话，感觉又不是很放心。所以还是坚持继续探索，终于也让我找到了。
0x02 解决方案 在nginx这段我没有配置ssl，所以不用配置证书啥的，就直接给出nginx的配置吧：
server { listen 中转节点监听端口; server_name 中转节点域名; location / { proxy_pass http://后端IP或域名:后端监听端口/wspath; # 若后端开启tls，则需要写https:// proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &amp;quot;upgrade&amp;quot;; } }  0x03 补充说明 之前的迷糊是在于不清楚tls的工作过程，以为中转后客户端也是直接与服务端进行tls握手的，其实真实的情况是，客户端是与nginx直接连接的，而nginx才是与v2服务端握手的一方。也就是说，客户端与nginx的连接 和 nginx与v2服务端的连接是不同的两端连接，两个不同的连接均可自由配置tls。
0x04 一些错误 1.nginx没配置ssl，但是v2客户端配置了tls连接造成的错误 [Warning] failed to handler mux client connection &amp;gt; v2ray.com/core/proxy/vmess/outbound: failed to find an available destination &amp;gt; v2ray.com/core/common/retry: [v2ray.com/core/transport/internet/websocket: failed to dial WebSocket &amp;gt; v2ray.</description>
    </item>
    
    <item>
      <title>Vi 的一些基本操作</title>
      <link>http://blog.sinowrt.cn/2021/2021-02-26t1740-basic-operation-in-vi/</link>
      <pubDate>Fri, 26 Feb 2021 17:40:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-02-26t1740-basic-operation-in-vi/</guid>
      <description>0x00 基本操作 1.查找 命令模式下，\ + 关键字
2.显示行号 命令模式下, :set number</description>
    </item>
    
    <item>
      <title>《深入理解JVM》之别在MacOS编译OpenJDK7</title>
      <link>http://blog.sinowrt.cn/2021/2021-02-26t1633-compile-a-jvm-on-macos/</link>
      <pubDate>Fri, 26 Feb 2021 16:33:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-02-26t1633-compile-a-jvm-on-macos/</guid>
      <description>0x00 前言 《深入理解JVM》这本书都看了大半了，但是里面的实验还没真正动手操作过，于是趁这段时间一一操作一遍。
首当其冲的当然是编译JVM了，似乎所有的坑都被我都趟了一遍，就写篇文来记录一下，顺便告诫大家，不要试图在新版本的macOS中编译OpenJDK7！
0x01 编译环境 macOS Catalina 10.15.2
Xcode 11.6
Command Line Tools MacOSX10.15.sdk
0x02 准备工作 1. 下载源码 在macOS中，先用brew安装mercurial代码版本管理工具
brew install mercurial  获取源码：
hg clone http://hg.openjdk.java.net/jdk7u/jdk7u-dev cd jdk7u-dev chmod 755 get_source.sh ./get_source.sh  而国内的网络到了./get_source.sh这一步，下载过程中总是会网络异常中断，所以我是在国外的vps上面下载好之后，再压缩拉回来的。
2. 安装XCode和Command Line Tools for XCode 由于我之前已经安装了，所以这一步跳过，具体的版本可以看0x01编译环境中的描述
3. 准备一个Bootstrap SDK 书中说到，“如果编译OpenJDK 7，Bootstrap JDK必须使用JDK6 Update 14或之后的版本”，而我用的是JDK1.7.80版本。
4. 安装Apache Ant Apache Ant 对版本有要求，1.7.1以上即可。 同时，Apache Ant 官网上有一句话必须要看一下：
&amp;ldquo;The 1.9.x releases require Java5 at runtime and 1.10.x requires Java8 at runtime.</description>
    </item>
    
    <item>
      <title>如何生成VMESS URL并发布订阅</title>
      <link>http://blog.sinowrt.cn/2020/2020-12-01t2202-how-to-generate-vmess-urls-and-public-as-subscription/</link>
      <pubDate>Tue, 01 Dec 2020 22:02:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-12-01t2202-how-to-generate-vmess-urls-and-public-as-subscription/</guid>
      <description>0x00 获得VMESS URL 我使用的是V2rayN客户端，直接全选所有节点，然后批量导出分享URL到剪切板即可
0x01 发布订阅信息 订阅信息实际上就是将VMESS URL（每个URL以回车符分隔）进行Base64加密，得到密文做成纯text网页，随便丢到一个安装了apache或nginx服务的服务器即可
测试方法：在浏览器输入该订阅的网址，能访问到完整的Base64密文即可
0x02 发布quantumult订阅信息 quantumult的订阅信息格式跟V2rayN的不太一样，在这里我还踩了一个小坑，且听我详细道来
这里要用到一个小工具，将V2rayN的vmess url转成符合Quantumult格式的vmess url
这是示例的vmess url vmess://ew0KICAidiI6ICIyIiwNCiAgInBzIjogIuekuuS+iyIsDQogICJhZGQiOiAiMTkyLjE2OC4xLjEiLA0KICAicG9ydCI6ICI0MzIxIiwNCiAgImlkIjogImQ3NzFkODlhLTliZWQtNDc2Ny1hNjlkLTE5NjJkY2MyZTY3YyIsDQogICJhaWQiOiAiNjQiLA0KICAibmV0IjogIndzIiwNCiAgInR5cGUiOiAibm9uZSIsDQogICJob3N0IjogIiIsDQogICJwYXRoIjogIi9leGFtcGxlIiwNCiAgInRscyI6ICIiDQp9
使用小工具转换之后的Quantumult vmess url为
vmess://56S65L6LID0gdm1lc3MsMTkyLjE2OC4xLjEsNDMyMSxub25lLCJkNzcxZDg5YS05YmVkLTQ3NjctYTY5ZC0xOTYyZGNjMmU2N2MiLG92ZXItdGxzPWZhbHNlLHRscy1ob3N0PSxjZXJ0aWZpY2F0ZT0xLG9iZnM9d3Msb2Jmcy1wYXRoPSIvZXhhbXBsZSJvYmZzLWhlYWRlcj0iSG9zdDoi
首先，比较一下V2rayN和Quantumult的vmess url,两者看似非常相似，除了vmess://相同之外完全不一样。可是你说它不一样吧，它也没个规律比较啥也无从下手
既然订阅密文是将vmess url 通过base64加密之后得到的，那么vmess://后面这一串东西是不是也是通过base64加密得到的密文呢，那就解密试试吧
这是V2rayN的Vmess://后一串密文解密的结果
{ &amp;quot;v&amp;quot;: &amp;quot;2&amp;quot;, &amp;quot;ps&amp;quot;: &amp;quot;示例&amp;quot;, &amp;quot;add&amp;quot;: &amp;quot;192.168.1.1&amp;quot;, &amp;quot;port&amp;quot;: &amp;quot;4321&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;d771d89a-9bed-4767-a69d-1962dcc2e67c&amp;quot;, &amp;quot;aid&amp;quot;: &amp;quot;64&amp;quot;, &amp;quot;net&amp;quot;: &amp;quot;ws&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;none&amp;quot;, &amp;quot;host&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/example&amp;quot;, &amp;quot;tls&amp;quot;: &amp;quot;&amp;quot; }  这是Quantumult的Vmess://后一串密文解密的结果
示例 = vmess,192.168.1.1,4321,none,&amp;quot;d771d89a-9bed-4767-a69d-1962dcc2e67c&amp;quot;,over-tls=false,tls-host=,certificate=1,obfs=ws,obfs-path=&amp;quot;/example&amp;quot;obfs-header=&amp;quot;Host:&amp;quot;  通过比较，vmess://后面是base64加密的密文实锤了
可是将这个vmess url追加到原有的url列表时，Quantumult却只能识别先前的url，而这个追加的无论是单独设为订阅，或是与原来的url一起设为订阅，都无法识别
更神奇的是，小工具生成Quantumult订阅url时，会同时生成二维码，使用Quantumult应用扫描这个二维码，或者复制这个url通过剪贴板导入的方式，都可以成功识别并添加该服务器
既然如此，那我们就看看这个Quantumult与原有的url列表中的服务器有什么不一样
新的Quantumult vmess url
示例 = vmess,192.168.1.1,4321,none,&amp;quot;d771d89a-9bed-4767-a69d-1962dcc2e67c&amp;quot;,over-tls=false,tls-host=,certificate=1,obfs=ws,obfs-path=&amp;quot;/example&amp;quot;obfs-header=&amp;quot;Host:&amp;quot;  旧列表中的Quantumult vmess url</description>
    </item>
    
    <item>
      <title>安装新版v2ray服务端</title>
      <link>http://blog.sinowrt.cn/2020/2020-09-15t2314-how-to-install-the-lasted-v2ray/</link>
      <pubDate>Tue, 15 Sep 2020 23:14:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-09-15t2314-how-to-install-the-lasted-v2ray/</guid>
      <description>0x00 问题 在使用旧教程安装v2ray的时候，出现如下错误提示
ERROR: This script has been DISCARDED, please switch to fhs-install-v2ray project. HOW TO USE: https://github.com/v2fly/fhs-install-v2ray TO MIGRATE: https://github.com/v2fly/fhs-install-v2ray/wiki/Migrate-from-the-old-script-to-this  意思是旧版的安装脚本已经停止使用，可以到https://github.com/v2fly/fhs-install-v2ray查看新脚本的使用说明
0x01 安装步骤 1.使用新脚本安装v2ray bash &amp;lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)
2.配置config.json文件 需要注意的是，新版的config.json文件默认路径从\etc\v2ray\config.json换到了\usr\local\etc\v2ray\config.json
由于我在本地备份又config.json，就不再重复配置了
将自带的config.json重命名为config.json.bak，留个备份，然后用xftp把本地的config.json上传到服务器对应目录中
要了解如何配置config.json的可以参考旧教程里面的服务端配置模板
最后附上V2ray新官网地址：https://www.v2fly.org/guide/start.html</description>
    </item>
    
    <item>
      <title>群晖 moments 中的视频不显示缩略图</title>
      <link>http://blog.sinowrt.cn/2020/2020-08-16t2053-synology-moments-preview-pictures-of-videos-was-damaged/</link>
      <pubDate>Sun, 16 Aug 2020 14:27:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-08-16t2053-synology-moments-preview-pictures-of-videos-was-damaged/</guid>
      <description>0x00 问题描述 为了解决照片备份的问题，我在群晖上安装了moments，但是一直以来都有一个问题，就是备份的所有视频在moments里面的缩略图都是显示损坏的，看着很不是滋味，就上网查了一下是什么原因。一圈下来，都说要看到缩略图的话，需要半洗白，那就洗白吧。
0x01 半洗白（其实根本不能解决问题）  根据网上的资料，半洗白一共有两种方法：
  一是通过算号，算出该型号的sn码，然后修改引导配置中的sn，从而达到半洗白
二是通过再docker中安装DDSM，进入虚拟的群晖系统，获取体验的sn号，然后跟方法一同样的，将该SN填入引导配置中
而新版的docker中已经将DDSM功能去掉了，所以使用方法二的话，需要卸载重装旧版的docker，再下载pat安装体验版的系统。整个过程过于繁琐，就不考虑方法二了。
 所以下面就详细描述方法一的操作过程：  失败了，略。
0x02 打补丁 试了所有的方法后，从百度到谷歌，终于在xpenology论坛找到了解决办法,附上补丁链接：
https://github.com/likeadoc/synocodectool-patch
该工具的简介：
This patch enables transcoding on Synologys DiskStation Manager 6+ without a valid serial number. The structure is loosely based on https://github.com/keylase/nvidia-patch
它的原理从简介中不难推断出，应该是解除了某项功能在消费者级别的GPU上的限制，使用方法也很简单。
wget https://raw.githubusercontent.com/likeadoc/synocodectool-patch/master/patch.sh chmod +x patch.sh sudo ./patch.sh -p  另外20年8月百度上还是一大片的序列号洗半洗白的教程，今天2022年3月18号，我看了下又多了种方法：
 安装第三方ffmpeg、创建第三方ffmpeg软连接
  百度一大片教程，我就不重复贴了，我也没试过，看大家用了都说好，可以试一下。</description>
    </item>
    
    <item>
      <title>python3.8 在安装 python-docx 时提示未安装libxml2</title>
      <link>http://blog.sinowrt.cn/2020/2020-07-22t1231-could-not-find-function-xmlcheckversion-in-library-libxml2.-while-installing-python-docx/</link>
      <pubDate>Wed, 22 Jul 2020 12:31:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-07-22t1231-could-not-find-function-xmlcheckversion-in-library-libxml2.-while-installing-python-docx/</guid>
      <description>因为Anaconda3的python环境在pyinstaller打包的时候，会把整个数学运算库打包进来，使整个程序体积达到300M以上，在分析程序运行时加载的动态链接库时，发现这些库在运行过程中都没有使用，虽然可以手动删除这些库，但是每次打包好了都要手动删除未免过于繁琐，所以打算把python切换一下，由于电脑里面之前已经安装了python3.8，所以只需要吧Anaconda3的环境取消激活就可以了。
但是项目中所用到的一些包，都要重新安装一遍了。其中就包括python-docx这个模块，在安装的过程中报了Could not find function xmlCheckVersion in library libxml2. Is libxml2 installed?这个错误。百度了一下，是缺少lxml引起的，需要到https://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml下载你所安装python版本的对应whl包，由于我的python是windows下的64位版本，于是我就下载了lxml‑4.5.2‑cp38‑cp38‑win_amd64.whl。
下载完成后，只需cd到该whl包的路径上，执行pip install lxml‑4.5.2‑cp38‑cp38‑win_amd64.whl就可以了。但是在安装的过程中却又出了点状况，提示lxml-4.5.2-cp38-cp38-win32.whl is not a supported wheel on this platform.，百度发现是包名有问题，在python控制台中输入import pip._internal; print(pip._internal.pep425tags.get_supported())
可以看到
[(&#39;cp38&#39;, &#39;cp38m&#39;, &#39;win_amd64&#39;), (&#39;cp38&#39;, &#39;none&#39;, &#39;win_amd64&#39;), (&#39;py3&#39;, &#39;none&#39;, &#39;win_amd64&#39;), (&#39;cp38&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;cp3&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py38&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py3&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py37&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py36&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py35&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py34&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py33&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py32&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py31&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py30&#39;, &#39;none&#39;, &#39;any&#39;)]  按照第一个参数可知，将文件名修改为lxml‑4.</description>
    </item>
    
    <item>
      <title>一条命令｜康康谁动了我的vps</title>
      <link>http://blog.sinowrt.cn/2020/2020-06-28t1610-find-out-the-attacker-who-attacked-your-vps/</link>
      <pubDate>Sun, 28 Jun 2020 16:10:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-06-28t1610-find-out-the-attacker-who-attacked-your-vps/</guid>
      <description>今天无意中发现了一个非常有用的命令  lastb ss -t</description>
    </item>
    
    <item>
      <title>帮酒店修复网络</title>
      <link>http://blog.sinowrt.cn/2020/2020-06-12t1436-help-bojue-hotel-to-repair-the-wireless/</link>
      <pubDate>Fri, 12 Jun 2020 14:36:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-06-12t1436-help-bojue-hotel-to-repair-the-wireless/</guid>
      <description>0x00 事由 最近在外地出差，我住的酒店环境还不错，就是我这个房间的网络down了，提示宽带密码错误。 于是我就连了楼上相同房间号的wifi。但是始终是隔着一层水泥板，信号不怎么好。于是我就想，那就进后台找一下宽带密码，修复一下我房间的wifi吧。
0x01 步骤 首先route -n get default查看默认网关，一般这种盒子的网关就是路由的管理后台地址，得到网关地址为192.168.125.1
sh-3.2# route -n get default route to: default destination: default mask: default gateway: 192.168.125.1 interface: en0 flags: &amp;lt;UP,GATEWAY,DONE,STATIC,PRCLONING&amp;gt; recvpipe sendpipe ssthresh rtt,msec rttvar hopcount mtu expire 0 0 0 0 0 0 1500 0  然后在浏览器输入地址192.168.125.1，打开后台登陆界面，还要输入用户名和密码
根据经验输入最常见的用户名admin 密码admin，回车，进去了
找到wan口设置，账户名直接能看到，密码用点号隐藏了，于是使出F12大法找到密码
然后连到我房间这个路由器,进入后台把密码填进去就可以了，跟前面是一样的步骤，就不赘述了
设置完保存&amp;amp;应用，等待设置生效后，ping一下看看网络通不通
搞定！</description>
    </item>
    
    <item>
      <title>Macbook Pro 2019使用感受</title>
      <link>http://blog.sinowrt.cn/2020/2020-06-10t1511-the-using-feeling-of-mbp/</link>
      <pubDate>Wed, 10 Jun 2020 14:27:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-06-10t1511-the-using-feeling-of-mbp/</guid>
      <description>机器是今年年初买的，当时不想用公司的电脑，我就把神船带到公司当主力机。
神船的性能是没得说的，但是这个重量(5kg)要背着上班通勤的话，我相信非习武之人绝对是承受不住的。
于是我就打算将神船留在公司，可是回家就没电脑用了呀，而且身为IT人无论身在何处，随身携带电脑是我们光荣的使命。所以就萌发了购置macbook pro的想法。
作为开发人员，16g内存是必选的，硬盘如果有条件还是建议512起步。但由于当时手头拮据，只选配了256的。新macbook pro在今年五月发布了，cpu 键盘 内存 硬盘 全线升级，如果上天再给我一次机会的话，我一定会等这四个月。
使用macbook最直接的感受就是它超长的续航了，正常办公使用5h+没问题。而且随用随关，不用时只要把盖合上实属省心。
现在我日常都是本地mac+远程win双端办公，只要有网络的地方都可以双端无缝切换，省心得很。
macbook使用到现在也有小半年了，大问题没有，小问题比如说finder的远程服务器连接实属蹩脚，系统偶尔也会开小猜，不过重启都能解决问题。但是我这个人就是不喜欢重启电脑，只要不出问题，我宁愿它7x24不间断服务。
前段时间还遇到了 macbook pro 2019 siri无法找到麦克风的问题，重启电脑即可解决。</description>
    </item>
    
    <item>
      <title>Macbook Pro查看电池信息</title>
      <link>http://blog.sinowrt.cn/2020/2020-06-10t1427-how-to-query-the-information-of-battery-on-mac/</link>
      <pubDate>Wed, 10 Jun 2020 14:27:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-06-10t1427-how-to-query-the-information-of-battery-on-mac/</guid>
      <description>在终端输入以下命令：
ioreg -rn AppleSmartBattery | grep -i capacity  &amp;quot;AppleRawCurrentCapacity&amp;quot; = 4867 &amp;quot;AppleRawMaxCapacity&amp;quot; = 5084 &amp;quot;MaxCapacity&amp;quot; = 5084 &amp;quot;CurrentCapacity&amp;quot; = 4867 &amp;quot;LegacyBatteryInfo&amp;quot; = {&amp;quot;Amperage&amp;quot;=18446744073709551214,&amp;quot;Flags&amp;quot;=4,&amp;quot;Capacity&amp;quot;=5084,&amp;quot;Current&amp;quot;=4867,&amp;quot;Voltage&amp;quot;=12729,&amp;quot;Cycle Count&amp;quot;=46} &amp;quot;DesignCapacity&amp;quot; = 5088 &amp;quot;BatteryData&amp;quot; = {&amp;quot;StateOfCharge&amp;quot;=96,&amp;quot;PMUConfigured&amp;quot;=0,&amp;quot;Voltage&amp;quot;=12699,&amp;quot;QmaxCell1&amp;quot;=5358,&amp;quot;AdapterPower&amp;quot;=839469241,&amp;quot;SystemPower&amp;quot;=1087516262,&amp;quot;ResScale&amp;quot;=117,&amp;quot;QmaxCell2&amp;quot;=5302,&amp;quot;QmaxCell0&amp;quot;=5341,&amp;quot;CycleCount&amp;quot;=46,&amp;quot;DesignCapacity&amp;quot;=5088}  </description>
    </item>
    
    <item>
      <title>关闭chrome浏览器广告弹窗</title>
      <link>http://blog.sinowrt.cn/2020/2020-05-27t1334-remove-the-ad-windows-of-chrome/</link>
      <pubDate>Wed, 27 May 2020 13:34:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-05-27t1334-remove-the-ad-windows-of-chrome/</guid>
      <description> 之前用google进行调研的时候，点进去了一个网站 ![]() 迫于打开心切，就点击了允许，之后时不时就会出现Bestdealfor10.life的弹窗，想要禁用，百度无果，使用google发现很多解决方法
 随便挑一个https://malwaretips.com/blogs/remove-bestdealfor10-life/
 按步骤，在chrome的设置-隐私和安全-网站设置-通知里面将https://bestdealfor10.life 移除即可  </description>
    </item>
    
    <item>
      <title>优美的switch</title>
      <link>http://blog.sinowrt.cn/2020/2020-05-20t1507-javagorgeous-switch/</link>
      <pubDate>Wed, 20 May 2020 15:07:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-05-20t1507-javagorgeous-switch/</guid>
      <description>相信大家都有这种体会，工作以来一直都是自己写代码，感觉自己的代码总是平平无奇，运行倒是能运行，就是没有那种让人眼前一亮的感觉。而每次阅读别人的源码，心里一直再默念，卧槽，还能这样写，天哪，太精辟了！
于是，我就想，把这些让人眼前一亮的代码都摘录下来。一方面，自己能学习留痕，二来也能把这些知识分享给大家。
private static String createPlayer(PlayerTypes playerType) { return switch (playerType) { case TENNIS -&amp;gt; &amp;quot;网球运动员费德勒&amp;quot;; case FOOTBALL -&amp;gt; &amp;quot;足球运动员C罗&amp;quot;; case BASKETBALL,PINGPANG -&amp;gt; &amp;quot;牛逼运动员&amp;quot;; case UNKNOWN -&amp;gt; throw new IllegalArgumentException(&amp;quot;未知&amp;quot;); }; }  另外，代码的优化应该在保证业务正常运行的前提下进行，下面我讲一个有隐患的代码优化例子：
Map map=new HashMap(){{ put(&amp;quot;key&amp;quot;,&amp;quot;value&amp;quot;); }};  这种写法，比起新建HashMap对象后再一个个put值，虽然是提高了代码的整体性，但是却存在着致命的缺陷，这也是我在搭地铁刷掘金时在一篇文章上看到的
首先给出结论：这种写法会导致抛出OOM异常
因为在new HashMap时，是调用了一个匿名内部类的put方法，而根据引用计数法，这个对象一直持有外部类的引用，导致该对象在GC时无法清除，埋下了OOM的隐患。</description>
    </item>
    
    <item>
      <title>mac 安装flutter</title>
      <link>http://blog.sinowrt.cn/2020/2020-05-12t1531-how-to-install-flutter-on-mac/</link>
      <pubDate>Tue, 12 May 2020 15:31:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-05-12t1531-how-to-install-flutter-on-mac/</guid>
      <description>首先从官网将flutter稳定版的压缩包下载下来，然后解压到一个目录中， vi ~/.zshrc 添加以下一行 export PATH=/(解压flutter的路径)/flutter/bin:$PATH 保存然后source ~/.zshrc
接下来flutter -h，却提示 无法打开“Dart”，因为apple无法检查其是否包含恶意软件
输入以下命令回车（会提示输入密码）即可解决： sudo spctl &amp;ndash;master-disable
再次输入flutter -h验证是否生效</description>
    </item>
    
    <item>
      <title>记一次生产环境 日期查询错误</title>
      <link>http://blog.sinowrt.cn/2020/2020-04-21t1011-date-query-error-in-product-environment/</link>
      <pubDate>Tue, 21 Apr 2020 10:11:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-04-21t1011-date-query-error-in-product-environment/</guid>
      <description>如图
想查询4月1日到21日的记录，可是却连着3月31日的记录都查到了
到后端查看日志，显示查询开始日期为31日16时，那么基本断定是时区出了问题
那么有几种可能，一是系统时区，一是数据库时区，三是docker容器内部的时区
第一步，date -R查看系统时区输出Tue, 21 Apr 2020 09:31:18 +0800,东八区，没问题
那么第二步，查看数据库时区，登录mysql，show variables like &amp;quot;%time_zone%&amp;quot;;
mysql&amp;gt; show variables like &amp;quot;%time_zone%&amp;quot;; +------------------+--------+ | Variable_name | Value | +------------------+--------+ | system_time_zone | UTC | | time_zone | SYSTEM | +------------------+--------+ 2 rows in set (0.01 sec)  跟随系统，也没问题，需要注意的是，如果mysql是部署在docker中的话，就要进入容器内部更改容器内部的时区了
保守起见，可以指定mysql的时区
set global time_zone = &#39;+8:00&#39;; set time_zone = &#39;+8:00&#39;; set time_zone = &#39;+8:00&#39;;  再次查看mysql时区，已经改变了
mysql&amp;gt; show variables like &amp;quot;%time_zone%&amp;quot;; +------------------+--------+ | Variable_name | Value | +------------------+--------+ | system_time_zone | UTC | | time_zone | +08:00 | +------------------+--------+ 2 rows in set (0.</description>
    </item>
    
    <item>
      <title>docker save 和 export 命令的区别</title>
      <link>http://blog.sinowrt.cn/2020/2020-04-20t1611-the-differences-of-docker-command-save-and-export/</link>
      <pubDate>Mon, 20 Apr 2020 16:11:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-04-20t1611-the-differences-of-docker-command-save-and-export/</guid>
      <description>在一次生产环境 docker 微服务更新 中 深刻意识到docker save 和 export 的区别
0x00 背景 上次使用虚拟机镜像部署了三个子系统，但是测试过程中还是发现了不少问题，所以这次需要过去更新几个微服务
于是就在公司虚拟机里面用export命令把几个容器导出来，放到生产环境中再import进去，然后run，结果死活运行不起来，提示run缺少参数。为了防止这种情况，我还把公司测试环境中的完整的容器启动命令都拍了下来，然后尝试构造命令，没有参数是吧，我用inspect命令把参数都找出来。接下来参数是不缺了，就是提示在工作目录中找不到文件。
0x01 分析： 在公司里面的容器，我是直接通过2375端口直接上传到docker镜像库的，在上传完毕后，还会执行dockerfile里面的命令，其中包含创建工作目录等命令。但是我将容器导入生产环境后，似乎是因为没有运行这些命令而造成找不到文件。
那么就可以推理出，我只是将docker的容器导出来了，但是容器里面的数据却没有导出。
怎样才能连同数据一起导出呢，那么就要用到save命令而不是export命令了。
0x02 解决： 最后只能让同事再帮忙将这几个微服务的容器重新导出一下
然后我这边再使用load命令将容器加载为镜像，微服务才得以成功更新。</description>
    </item>
    
    <item>
      <title>宿主机转发未开启导致无法访问docker内部网络</title>
      <link>http://blog.sinowrt.cn/2020/2020-04-17t1702-can-not-access-the-nacos-service-in-docker-container/</link>
      <pubDate>Fri, 17 Apr 2020 17:02:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-04-17t1702-can-not-access-the-nacos-service-in-docker-container/</guid>
      <description>今天迁移了虚拟机之后，准备上nacos改一下配置，可是登录http://...:8848/nacos却连接超时，telnet一下也不通，于是上部署了nacos的docker容器的宿主机上，curl http://docker内网ip:8848/nacos 却是有返回数据的，那就确定应该是转发出了问题，
sysctl -a | grep net.ipv4.ip_forward
显示
net.ipv4.ip_forward = 0
原来是转发没开启，于是
echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward
sysctl -p 重新加载内核参数
再telnet一下，通了搞定
上http://...:8848/nacos进行配置就行了</description>
    </item>
    
    <item>
      <title>docker容器迁移</title>
      <link>http://blog.sinowrt.cn/2020/2020-04-16t1623-migrate-the-container-to-another-docker/</link>
      <pubDate>Thu, 16 Apr 2020 16:23:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-04-16t1623-migrate-the-container-to-another-docker/</guid>
      <description>在项目部署的时候，本来是部署两个esxi虚拟机，但是在部署测试过程中发现对象存储服务依赖了另一个虚拟机的minio服务，由于该虚拟机的minio服务是部署在docker上的，所以打算将该容器迁移到要部署的其中一个虚拟机的docker中
步骤：
1. 导出容器 docker export 容器ID &amp;gt;minio.tar
2. 将导出minio.tar放到要部署的虚拟机上面
3. 将该容器导入镜像docker import minio.tar minio/minio:lastest
4. 新建容器并启动镜像
docker run -d -p 9000:9000 --name minio -d -e &amp;quot;MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE&amp;quot; -e &amp;quot;MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&amp;quot; -v /mnt/data:/data -v /mnt/config:/root/.minio minio/minio:lastest /usr/bin/docker-entrypoint.sh server /data  启动命令可以在原宿主机上使用docker inspect 容器ID查看，并根据需求调整启动参数
至此，容器的迁移工作顺利完成。</description>
    </item>
    
    <item>
      <title>esxi web client导出虚拟机 中断 报网络错误</title>
      <link>http://blog.sinowrt.cn/2020/2020-04-16t1619-esxi-network-error-while-exporting-esxi-virtual-machine/</link>
      <pubDate>Thu, 16 Apr 2020 16:19:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-04-16t1619-esxi-network-error-while-exporting-esxi-virtual-machine/</guid>
      <description>今天使用esxi的web client导出虚拟机时，总是在导出到20G左右的时候中断，报网络异常，于是上vmware官网找有没有导出虚拟机的工具
发现 OVFTOOL这个小工具，点击链接下载下来（需要注册账号才能下载），安装
 打开cmd进入安装文件夹，执行ovftool.exe vi://用户名@esxi的ip/虚拟机名 K:/ovf
 如果遇到 Fault cause: vim.fault.InvalidState 错误，请确认虚拟机为关机状态
  运行结果如下所示
C:\Program Files\VMware\VMware OVF Tool&amp;gt;ovftool.exe vi://root@***.***.***.***/docker K:/ovf Enter login information for source vi://***.***.***.***/ Username: root Password: *********** Opening VI source: vi://root@***.***.***.***:443/docker Opening VI source: vi://root@***.***.***.***:443/docker Opening OVF target: K:/ovf Writing OVF package: K:/ovf\docker\docker.ovf Disk progress: 3%  这个小工具效果非常好，不用担心网络错误问题，进度也能看到，可以打9分</description>
    </item>
    
    <item>
      <title>maven问题汇总</title>
      <link>http://blog.sinowrt.cn/2020/2020-04-16t1023-problems-i-meet-while-using-maven/</link>
      <pubDate>Thu, 16 Apr 2020 10:23:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-04-16t1023-problems-i-meet-while-using-maven/</guid>
      <description>今天使用maven打包上传docker时，发现许多问题，就此记录一下： 1.maven打包报多个main方法的问题
[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.1.12.RELEASE:repackage (default) on project blade-electronic-library: Execution default of goal org.springframework.boot:spring-boot-maven-plugin:2.1.12.RELEASE:repackage failed: Unable to find a single main class from the following candidates [org.springblade.library.ElectronicLibraryApplication, org.springblade.library.controller.BookUploadController, org.springblade.library.utils.BookmarksUtils, org.springblade.library.utils.KeyContextUtils, org.springblade.library.service.impl.BookReadRankServiceImpl] -&amp;gt; [Help 1] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.</description>
    </item>
    
    <item>
      <title>[Ubuntu]将ngrok添加到supervisor守护进程</title>
      <link>http://blog.sinowrt.cn/2020/2020-04-12t2330-ubuntuadd-ngrok-to-supervisor/</link>
      <pubDate>Sun, 12 Apr 2020 23:33:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-04-12t2330-ubuntuadd-ngrok-to-supervisor/</guid>
      <description>0x00 安装Supervisor 直接执行以下命令即可安装Supervisor
sudo apt-get install supervisor  0x01 添加ngrok的supervisor配置 进入supervisor配置目录,并新建ngrok.conf文件
cd /etc/supervisor/conf.d vi ngrok.conf  输入以下内容：
[program:ngrok] directory = /usr/local/ngrok/ command = ngrokd -domain=&amp;quot;ngrok.******.cn&amp;quot; -httpAddr=&amp;quot;:80&amp;quot; autostart = true ; 在 supervisord 启动的时候也自动启动 startsecs = 5 ; 启动 5 秒后没有异常退出，就当作已经正常启动了 autorestart = true ; 程序异常退出后自动重启 startretries = 3 ; 启动失败自动重试次数，默认是 3 user = root ; 用哪个用户启动 redirect_stderr = true ; 把 stderr 重定向到 stdout，默认 false stdout_logfile_maxbytes = 20MB ; stdout 日志文件大小，默认 50MB stdout_logfile_backups = 20 ; stdout 日志文件备份数 stdout_logfile = /var/log/supervisor/ngrok.</description>
    </item>
    
    <item>
      <title>npm 报错 EPERM: operation not permitted</title>
      <link>http://blog.sinowrt.cn/2020/2020-04-10t1001-npm-eperm-operation-not-permitted/</link>
      <pubDate>Fri, 10 Apr 2020 10:01:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-04-10t1001-npm-eperm-operation-not-permitted/</guid>
      <description>昨天从拉了个前端项目下来，用IDEA打开，例行npm install，安装到一般报错EPERM: operation not permitted
按网上的删除package-lock.json后，情况依旧
以为是管理员权限问题，于是win + x再按a调出powershell，进入项目目录，执行npm install，报zlib: unexpected end of file，于是执行npm cache clean -force ，报错
npm ERR! The operation was rejected by your operating system. npm ERR! It&#39;s possible that the file was already in use (by a text editor or antivirus), npm ERR! or that you lack permissions to access it. npm ERR! npm ERR! If you believe this might be a permissions issue, please double-check the npm ERR!</description>
    </item>
    
    <item>
      <title>xxl-job 启动报异常 java.lang.NoClassDefFoundError: groovy/lang/GroovyClassLoader</title>
      <link>http://blog.sinowrt.cn/2020/2020-04-03t0853-xxl-job-groovyclassloader-noclassdeffounderror-exception/</link>
      <pubDate>Fri, 03 Apr 2020 08:53:27 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-04-03t0853-xxl-job-groovyclassloader-noclassdeffounderror-exception/</guid>
      <description>今天负责交接xxl-job数据同步系统，首先当然是将项目跑起来啦
但是项目拉下来后，配置好，运行抛了个NoClassDefFoundError异常：
org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;xxlJobExecutor&#39; defined in class path resource [org/springblade/job/executor/config/XxlJobConfig.class]: Invocation of init method failed; nested exception is java.lang.NoClassDefFoundError: groovy/lang/GroovyClassLoader at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:847) at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:744) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:391) at org.springframework.boot.SpringApplication.run(SpringApplication.java:312) at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:140) at org.springblade.core.launch.BladeApplication.run(BladeApplication.java:49) at org.springblade.job.executor.JobApplication.main(JobApplication.java:34) Caused by: java.lang.NoClassDefFoundError: groovy/lang/GroovyClassLoader at com.xxl.job.core.glue.GlueFactory.&amp;lt;init&amp;gt;(GlueFactory.java:36) at com.xxl.job.core.glue.GlueFactory.&amp;lt;clinit&amp;gt;(GlueFactory.java:20) at com.xxl.job.core.executor.impl.XxlJobSpringExecutor.afterPropertiesSet(XxlJobSpringExecutor.java:39) at org.</description>
    </item>
    
    <item>
      <title>docker安装的mysql:5.7服务 关闭大小写敏感选项</title>
      <link>http://blog.sinowrt.cn/2020/2020-03-28t1023-mysql-disable-case-sensitive/</link>
      <pubDate>Sat, 28 Mar 2020 10:23:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-03-28t1023-mysql-disable-case-sensitive/</guid>
      <description>0x00 事由 日志系统开发完成了，服务已经部署到服务器上，也该把本地数据库上传上去了，于是就在docker上面安装了mysql:5.7，但是在开发环境中mysql是不区分大小写的，而docker上面的确实默认区分大小写，所以需要关闭大小写敏感这个选项。
0x01 步骤 首先进入容器内部
docker exec -it 容器ID /bin/bash cd /etc/mysql/mysql.conf.d vi mysqld.cnf  发现没有vi，那就装一下吧
apt-get update apt-get install vim  vi mysqld.cnf
在结尾追加一行
lower_case_table_names=1
变成
# Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved. # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License, version 2.0, # as published by the Free Software Foundation.</description>
    </item>
    
    <item>
      <title>js大整数精度导致前后端传参不一致问题</title>
      <link>http://blog.sinowrt.cn/2020/2020-03-05t1618-something-changed-while-java-long-parsing-to-javascript/</link>
      <pubDate>Thu, 05 Mar 2020 16:18:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-03-05t1618-something-changed-while-java-long-parsing-to-javascript/</guid>
      <description>js中规定安全整数的范围是-2^53~2^53，而后端传过去的记录id为64位，所以会导致参数精度丢失的问题。
windows查看进程启动时间，run-&amp;gt;msinfo32，在打开的系统信息窗口中点击“软件环境→正在运行任务”，即可看到所有进程的相关信息包括启动时间</description>
    </item>
    
    <item>
      <title>Linux 挂载错误 Transport endpoint is not connected</title>
      <link>http://blog.sinowrt.cn/2020/2020-02-18t1602-linux-mount-error-transport-endpoint-is-not-connected/</link>
      <pubDate>Tue, 18 Feb 2020 16:02:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-02-18t1602-linux-mount-error-transport-endpoint-is-not-connected/</guid>
      <description>0x00 前因 想在三毛鸡上挂载gd，于是就在189的三毛鸡上面安装了rclone，并尝试挂载，但是没到挂载的那一步都会卡住，后来偶然掉线了，于是再次登陆上去，发现挂载还在进行中，于是kill掉该进程重新挂载。但在重新挂载的过程中报错了，提示&amp;rsquo;failed to mount FUSE&amp;rsquo;,起初以为没装FUSE，尝试了apt-get install fuse提示fuse已安装。而每次ls以及df -h都会提示Transport endpoint is not conneted。
0x01 解决办法 kill进程后，对rclone尝试mount的本地文件夹进行umount，最后再重新挂载。</description>
    </item>
    
    <item>
      <title>在esp8266中使用外部中断作为按键输入</title>
      <link>http://blog.sinowrt.cn/2020/2020-01-08t0021-problems-of-using-the-external-interupt-on-esp8266/</link>
      <pubDate>Wed, 08 Jan 2020 00:21:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-01-08t0021-problems-of-using-the-external-interupt-on-esp8266/</guid>
      <description>0x00 起因 十月份使用esp8266，利用sonoff的源码做了个homekit小开关，虽然源码已经做得十分完善了，但是不符合我的需求：我需要使用ios的家庭开关灯（这个功能不用改动），还要将esp8266部署到墙上的86开关上，源码中的处理逻辑是在gpio0设置一个微动开关，长按清配置，短按开关灯。但我不可能将墙上原本就有的开关改成微动吧，一来不好操作，二来线路也太乱，于是我就想基于该源码的基础上，添加一个按键，io口电平发生变化即触发开关灯逻辑。 于是故事就开始了。。。
0x01 过程 程序的编写十分简单，新建自定义的button头文件和源文件，根据原来的按钮照葫芦画瓢进行编码，然后引入到main中，一切都进行得十分顺利。然鹅，这才是噩梦的开始。。。
0x02 遇到的问题 1. 接荧光灯，使用物理按键，开灯秒熄 主要原因：按键未消抖
次要原因：荧光灯电磁干扰
解决过程：更换荧光灯为led灯，发现问题依旧。随后关注到开关过程的信号抖动，下面贴出第一版代码:
void realbtn_intr_callback(uint8_t gpio){ rcallback(gpio); }  软件硬件均无消抖，一旦遇到抖动，便触发n次开关逻辑，后来仔细研究了原作者的按键代码，发现消抖逻辑十分巧妙，于是在自定义按钮上也仿照着写了个消抖逻辑，如下为添加了按键消抖的代码：
void realbtn_intr_callback(uint8_t gpio){ uint32_t now = xTaskGetTickCountFromISR(); if ((now - last_event_time)*portTICK_PERIOD_MS &amp;lt; 200) { // debounce time, ignore events return; } rcallback(gpio); last_event_time = now; }  使用了这段代码之后，按键就基本上能用了，但是时不时会出现开关客厅的荧光灯也会触发中断。
2. 接入用电器会触发中断，导致无故开关灯。 这个问题排查了很久，从电源，到板子再回到程序，都查了一个遍，期间也踩了很多坑。
起初怀疑电源电压不稳，造成模块重启，但是回头一想，模块重启只会熄灯，而不会开灯，电源问题排除。
再就是怀疑板子质量，之前被我拆焊过芯片，存在虚焊的风险，而手头上还有块nodemcu，于是将程序烧到nodemcu上，问题依旧。在调试原全io引出的模块和nodemcu的过程中，踩了最大的坑就是使用了陈年面包板和杜邦线，可能时时间长了，金属触点被氧化的原因，杜邦线电阻竟然有1-2欧，导致加到模块的电压存在0.2-0.3v的压降，这就要命了。烧好程序，一上电就飞，各种奇奇怪怪的现象都出来了。还一度以为烧写次数太多，把模块给烧烂了。。。后来使用了短杜邦线，板子突然又好用了，这才引起了我的怀疑。到网上一搜，同样是哀鸿遍野。总结为两点：面包板杜邦线这东西，要测过再用，电源的检查更要上心。
在这之前，我就怀疑是电磁干扰的问题，虽然手头上没有示波器，但是对于这个的怀疑还是一直有的。也尝试过很多办法，将导线进行绞合，将模块从86盒中拆出来，问题还是存在。直到前两天收拾桌子，在排插上插入台灯的插头，房间的灯就很有节奏地，插进去就关，再插一下就灭。于是就有了测试用例。后来，偶然地将连接按键的导线都拆了，再进行测试，问题就消失了，于是确定是电磁干扰再导线中形成了噪声，而外部中断的io口十分灵敏，一旦有电平的变化，以及会响应。于是上网搜索了软件消抖的例子，最简单也最好用的实属中断延时判断了。一开始使用vTaskDelay进行延时，但是每次触发中断都会导致模块重启，看了下看门狗的输出，再结合网上的搜索结果，原来是rtos系统在中断程序中不允许使用延时api。不使用也行，那我设置while循环用xTaskGetTickCountFromISR()获取节拍，减去now，乘上节拍周期，对该时间进行判断总行了把。结果还是一触发，模块就重启。后来将xTaskGetTickCountFromISR()和now都打印出来，才了解到xTaskGetTickCountFromISR()是从节拍寄存器中取节拍数的，当前都中断了，节拍寄存器的内容当然不会发生变化了。于是我把while段给删了，留下printf打印语句，只想看看触发的tick数和节拍周期的数值是怎样的。结果误打误撞，延时判断似乎生效了。很早之前就知道将数据打印到串口会花费一定的时间，但是怎么就没想到用到这里呢！突然茅塞顿开，下面贴出代码：
void realbtn_intr_callback(uint8_t gpio){ uint32_t now = xTaskGetTickCountFromISR(); if ((now - last_event_time)*portTICK_PERIOD_MS &amp;lt; 200) { // debounce time, ignore events return; } printf(&amp;quot;interupted--[-%d--%d]\n&amp;quot;,(now - last_event_time),portTICK_PERIOD_MS); if(gpio_read(gpio)!</description>
    </item>
    
    <item>
      <title>如何将群晖Nas扔出外网</title>
      <link>http://blog.sinowrt.cn/2019/2019-11-30t1214-expose-synology-diskstation-to-the-internet/</link>
      <pubDate>Sat, 30 Nov 2019 12:14:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2019/2019-11-30t1214-expose-synology-diskstation-to-the-internet/</guid>
      <description>0x00 思路 分别在vps和路由端部署ngrok服务端与客户端，客户端在线时主动向服务端发起请求建立隧道，外部设备可直接向服务端请求相应的隧道，从而实现内网穿透。
0x01 在vps上部署ngrok服务端 良心云和套路云的学生套餐用来做内网穿透的服务端还是相当香的，由于ngrok需要用到域名，而我的域名只在良心北了岸，要是用套路云的话会截断提示未备案，无法访问，所以这次就直接用良心云的vps搭建服务端。 * 安装ngrok服务端
网上大部分教程都是从安装go环境开始，再编译ngrok客户端，过程很复杂。而我只要简单的穿透服务，不需要tls啥的，其实安装过程很简单，只需要两条命令
apt-get update apt-get install ngrok-server   启动ngrok服务端
  一条命令就搞定，监听80、443、4443端口，如果vps有防火墙请放行这几个入站端口。如果需要指定证书还有端口什么的可以自行添加启动参数，这里不再赘述。
ngrokd -domain=ngrok.example.com  0x02 添加域名解析 添加两条域名解析记录
类型 | Name | Content -|-|- A记录 | *.ngrok | ngrok服务器ip A记录 | ngrok | ngrok服务器ip
0x03 ngrok客户端配置  在本地，我使用刷了padavan固件的newifi3路由，内置了1.4版本的ngrok客户端。服务端是1.6版本的，经测试能通用。
 客户端配置很简单   0x04 结语 到这里，群晖已经暴露在外网了，请设置强大的登录密码防止数据泄露。</description>
    </item>
    
    <item>
      <title>newifi mini 拨号设置</title>
      <link>http://blog.sinowrt.cn/2019/2019-11-29t0028-newifi-mini-dialing-setting/</link>
      <pubDate>Fri, 29 Nov 2019 00:28:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2019/2019-11-29t0028-newifi-mini-dialing-setting/</guid>
      <description> 0x00 线缆连接 * 将路由器接入电源 * 用一根网线，一端接入路由器的任意蓝色端口，另一端接入主机 * 将用于拨号的网线接入路由器的黄色端口
0x01 登录路由器管理界面 * 打开浏览器，在地址栏输入192.168.123.1,回车 * 在弹出来的登录窗口输入用户名admin,密码admin258
0x02 拨号设置 * 点击外部网络 * 选择外网连接类型为PPPoE拨号 * 在用户名称处填入拨号账号 * 在用户密码处填入拨号密码 * 最后滑到页面底部，点击应用本页面设置
0x03 设置好了就网上冲浪吧！ </description>
    </item>
    
    <item>
      <title>记多益面试</title>
      <link>http://blog.sinowrt.cn/2019/2019-10-31t1200-dy-interview/</link>
      <pubDate>Thu, 31 Oct 2019 12:00:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2019/2019-10-31t1200-dy-interview/</guid>
      <description>0x00 面试通知  自从笔试通过后被晾了差不多半个月，30号晚突然收到多益的面试通知，面试时间为31号早上11:40，woc这么快，赶紧吃了饭回来准备一下  0x01 面试过程  早上九点多，hr突然打电话过来说面试提前到了10点，我赶紧登陆了战盟，发送了面试确认 大概10:19，面试官通知面试，但是战盟不识别摄像头，改为qq视频 面试开始了，整个过程持续了整整有30分钟，问题（不完整）整理了一下，贴在下面   自我介绍 做过什么项目，觉得特别有成就感的是哪个，用了什么技术，有没有做过web服务端项目，用了什么技术？ 有没有做过什么项目使用了缓存机制的？ 谈谈对消息队列的理解 堆和栈的区别，哪个快些？ 引用类型和值类型的概念与区别？ 接口和抽象类的区别？为什么使用接口和抽象类？ 进程与线程？ 使用线程的优点是什么？在什么情况下使用？ 手机APP消息推送的机制？ 有没有使用过Redis或MongoDB？ TCP三次握手，四次挥手？为什么要三次握手？服务器断开与客户端断开有什么区别？ 使用过什么中间件？ 对事务的理解？ 非关系型数据库与关系型数据库的区别？ MySql中，select * from table where field=null 为什么无法匹配空值？ varchar 与 char 的区别，哪个比较长，varchar(32)代表什么？ cookie与session的区别，通过什么将cookie与session进行匹配？ 如何在多线程中共享变量？ Web中有哪些漏洞攻击方法需要防范？ 对加班的看法？ 最近了解什么新技术？ 编程题：实现一个函数, 输入两个版本号（随机输入二位到四位），比较两个版本号的大小。 输入示例： 1.2.1 1.10.2.0(下面贴我的烂代码，考点主要有正则表达式，字符串转Integer)
  public static int comp(String a,String b) { String[] k=a.split(&amp;quot;\\.&amp;quot;); String[] g=b.split(&amp;quot;\\.&amp;quot;); int min=k.length&amp;gt;g.length?g.length:k.length; for(int i=0;i&amp;lt;min;i++) { int kn=Integer.parseInt(k[i]); int gn=Integer.</description>
    </item>
    
    <item>
      <title>中兴W815N V3 500mw网桥改ubnt</title>
      <link>http://blog.sinowrt.cn/2019/2019-09-08t1559-zte-w815n-refitting/</link>
      <pubDate>Sun, 08 Sep 2019 15:59:08 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2019/2019-09-08t1559-zte-w815n-refitting/</guid>
      <description> 0x00 状况描述  毕业租房子后，一直在整网络。因为是出租屋，想着租一年就搬了，就把学校的热点桥接过来将就着用就算了。这两个月，桥接用过newifi mini，TP的340G+，信号一直不理想，就想着搞个正版ubnt。看着看着，就觉得吧，这个ubnt的水也深，也不便宜，看到无线论坛上有坛友说用运营级别的大功率网桥，深入了解，其中还真的不乏好设备。看过烽火2400、中兴W815，想着大品牌折腾的人应该不少，最后入手了中兴W815。  0x01 设备描述  中兴W815拥有双功放，无线功率最高可达500mw，基于7240+9283方案，改ubnt的教程也不少，但是资料较为零散，需要取百家所长。  0x02 改装过程  首先是备份原厂固件，用风枪将flash取下，焊到编程器上面，我用的是ch341普通的绿板编程器，备份过程挺久的，毕竟固件有16m。 固件备份完成后，直接擦除芯片，将breed写入flash，我用的是h大的将gpio12作为reset键的版本breed-ar724x-reset12-r1163.bin，烧录好就将flash焊回去。 烧好breed，就要改reset键了。这里参考的是坛友的改装方案 用漆包线将7240的第89脚用漆包线引出，焊到空车位上，在旁边补上10k上拉电阻  翻到后面同样用漆包线引到直连reset键的C70电容右脚。  很奇怪，我按照坛友的方法改好后，开机却一直重启。用万用表测量gpio12的对地电压，开机时很稳定的2.5v但是开机完成后马上跳回0.1v，导致机器无限重启。于是我尝试将电阻换为2.2k甚至1k，问题依旧，最后直接不要电阻，将电阻两脚直接点上，没再出现重启的现象。最后还是接上了20欧的电阻，电流能减少一点是一点，开机一切正常。  0x03 提取art  art在原厂固件的最后64KB，直接用winhex备份出来即可  0x04 刷入ubnt固件与art  由于我找不到适用的ubnt固件，最后还是用了坛友的编程器固件，最后刷入art正常使用  0x05 外接天线  由于原机的天线接头比较特别，是N型母头，要和sma接头的八木天线连接，还得买个N型公头转sma外螺内针的转接头  0x06 使用效果  用原机的5dbi天线伸出窗外效果还行，信号在-60db左右，但是这机子不防水啊，常年这样用也不是办法，但是把机子放在室内，再外接八木天线或者6dbi的全向天线效果都不理想！ 总结：翻车了！  </description>
    </item>
    
    <item>
      <title>win10任务栏单程序多窗口无法切换的问题(已解决)</title>
      <link>http://blog.sinowrt.cn/2019/2019-08-10t1544-clicking-windows10-taskbar-preview-notworking/</link>
      <pubDate>Sat, 10 Aug 2019 15:44:08 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2019/2019-08-10t1544-clicking-windows10-taskbar-preview-notworking/</guid>
      <description> 0x00 状况描述  在某应用上面操作一段时间之后，将鼠标悬停在任务栏的某已打开多个窗口的应用程序上面时，其上方的预览窗口一闪而过。需要点击任务栏，使任务栏获得焦点后，再将鼠标悬停在该多窗口应用程序上方，才会显示预览窗口。此时，再将光标悬停在某预览窗口上方，单击，奇迹出现了——该窗口并不会恢复，而是一闪而过，点击之前的桌面是啥样就是啥样。
 正常健康的win10系统，在鼠标悬停在任务栏的应用图标上面，加入该页面打开了多个窗口（如chrome以及windows的资源管理器）图标上方会出现预览窗口，然后鼠标悬停在某个窗口上方并单击即可打开该窗口。
 这是一个间歇性的问题
 这个问题应该在很久之前就出现了，但是一直使用win+tab快捷键能够解决，就一直没当回事
 最近键盘放在一个不太方便的位置，每次需要切换窗口都需要另一只手够到键盘，win+tab切换，才发现问题大条了
  0x01 问题排查过程  上百度搜索 win10 无法切换窗口，发现较多的是2015年的一个bug。对于该bug的描述是————某应用程序打开了多个窗口，若需要从其中一个窗口切换到另一个窗口，需要将当前窗口最小化，需要切换的窗口才能显示在最前端。该问题看似很像我的问题，但是其实不是一回事。于是我继续查找，还有大部分是快捷键alt+tab都不生效的，这个问题似乎已经有了解决方案，只要将注册表中的“AltTabSettings”项修改为1就行了。但是我的问题也不是这样啊，算了还是请出谷歌吧。
 在谷歌上搜索win10 无法切换窗口，发现了挺多在microsoft support上的提问，有好几个类似我的情形，但是得到的回复都是
 1.在启动项中隐藏所有windows自带的服务，把其他服务全部关闭自启动并重启（对我无效）
 2.将系统文件与镜像文件进行对比，检查是否存在缺陷文件，并修复重启（对我无效）
 当然，也有很多大神朋友说是BING输入法或者BING词典的问题，导致焦点丢失，卸载了就好了。（我的系统中也没有折玩意儿啊）
 在microsoft support中发现一个回复挺有意思的，说到国外似乎没有这种情况发生？？？
 于是我推测是不是系统自带的中文输入法有问题，我甚至将系统语言修改为英文，但是问题如故。
 我开始在谷歌上面利用clicking windows10 taskbar preview not working，了解到在外国友人手中的电脑也存在该问题，于是我就放心了，这应该是windows10的一个bug。
 经过众多方法都无果之后，我似乎放弃了，甚至一度想要恢复到win7，但是我并没有备份，当然这也只能是想想了。
 后来我来到了国外版的知乎Reddit中，简简单单地搜索windows10 taskbar期望找到一个同病相怜的“友人”。
 没想到我真的找到了，顿时内牛满面，该网友还用一段youtube的视频完美复现了这种情况，他提到它也到microsoft support上提问过，但是都是得到万金油式的回答（类似重启啊，修改注册表啊。。。），并在最后着重提到他也重装了多次系统，以及另外一个他遇到的bug（在开始菜单中右键也会一闪而过，但这个问题我倒没有遇到过）。唉！是windows的bug石锤了。我的心情有所平复，但是我依旧没有得到一个满意的答案。
 贴出该问题的地址，有兴趣的朋友可以看一下跟你遇到的问题是不是一样鸭！
 在我不死心的时候，我想到会不会是跟我之前安装的SynTPEnh.exe，触摸板辅助软件有关呢。二话不说，先用任务管理器杀掉再说吧。但是十分巧合，我按错按键了，想按ctrl+shift+esc，竟然按了win+r，更巧合的是r也没按出来。这时我就发现，外接键盘的win键按了竟然没弹出开始菜单？？？我反复按，只有极少部分时候会弹出开始菜单的界面。会不会是我的键盘失灵了？我此时又按了一下笔记本自带键盘的win键，发现似乎桌面刷新了一下，开始菜单也出现了。我也顾不上那么多，打开任务管理器把SynTPEnh.exe杀了。此时我再用鼠标悬停到chrome上面，发现竟然好了？？？好了？？？那这到底是跟外接键盘还是SynTPEnh.exe有关呢。于是我利用控制变量法，进行了一系列的实验，发现与谁都无关！！！
 也不能说一无所获吧，我还是找到了解决问题的方法。当问题出现的时候，只要按一下笔记本自带键盘的win键，弹出开始菜单，一切又开始正常工作了。
  更新！！！问题已解决！！！  我私信了Reddit上面的这位友人，询问是否解决了该问题。他回复说，是他的罗技键盘上面的媒体键坏了的原因，把坏的键修复后问题就解决了。此时我突然想起我的笔记本自带键盘上的esc键也坏了，是不是这个原因呢？于是我把自带键盘拆了，问题也迎刃而解！！！然后我实验了一下，按住外接键盘的esc键，再按win键，问题重现了!esc键的锅石锤了！  0x02 总结  windows10 还是会存在一定的小问题，其实也不小了，至少影响到了工作效率嘛。 我甚是想念windows7的稳定，并且强烈建议强迫症患者还是留在win7吧，windows10虽然相对于刚面世时少了很多问题，但是小问题依旧存在。 win7与win10就像心头的朱砂痣与床前明月光，win7稳定而强大，虽然用户界面做的差了点，但是经过多年的沉淀，很多小问题都被发现并被开发者或用户解决了，无论大小问题，在网上都能搜到解决方案。而win10，外观非常惊艳，但是小问题依旧存在，由于面世的时间并不久，很多小问题都没有受到开发者的关注，并且用户也没有摸索到解决方案，导致强迫症患者非常头疼。 一句话总结：macos真香！  总结的话就当我放了个屁吧: ) </description>
    </item>
    
    <item>
      <title>群晖docker与移动网络的恩怨情仇</title>
      <link>http://blog.sinowrt.cn/2019/2019-08-05t1747-the-fucking-china-mobile/</link>
      <pubDate>Mon, 05 Aug 2019 17:47:08 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2019/2019-08-05t1747-the-fucking-china-mobile/</guid>
      <description> 0x00 起因  舍友淘汰了一台笔记本电脑，被水泡了，也经过我的手修过，最后硬盘还是回天乏术。毕业了，也就扔给我了，由于手头上没有多余的硬盘，于是拆掉了群晖上的120G的东芝硬盘安上去。但是在转移资料的时候，只转移了盘内的文件，没有留意到群晖的package也需要转移。就这样，配置好在docker上的aria2也GG了。群晖没有了离线下载，就如烧烤没有孜然，失去了灵魂。 学校上个月换了运营商，换成了稀巴烂的移动网。 今天恰好有空，就重装一下aria2。  0x01 经过  docker安装挺顺利的，接下来就找一下aria2的镜像呗，输入aria2查找了半天，却弹了个failed to query registry的提示出来。我寻思着，是不是注册表源失效了，换成阿里云的源，结果直接not found。 这就奇怪了，以前安装的时候一切挺顺利的，没遇到过这种情况。于是google了一番，有让改dns的，改了n多个也没见效果。后来发现挺多回帖说是移动网的问题，用代理下吧，newifi3刚拿回来还没空刷机，刷完机还得配梯子，也挺折腾的。 我的网络是中继了学校的wifi过来的，于是我用手机开了个wifi，那就中继手机吧。试了一下，果然是移动网的问题，这个问题也就结了。  0x02 总结  移动网垃圾！  </description>
    </item>
    
    <item>
      <title>救救bandwagonhost被禁的IP吧</title>
      <link>http://blog.sinowrt.cn/2019/2019-06-13t1300-how-to-save-the-baned-ip/</link>
      <pubDate>Thu, 13 Jun 2019 13:02:08 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2019/2019-06-13t1300-how-to-save-the-baned-ip/</guid>
      <description>0x00 事件起因  2019年儿童节中午，google搜索超时，ss服务器尚可ping通，但端口连接异常。 13:00 更换端口，仍无法使用，ping检测IP被墙  0x01 解决方案  有消息称等待数天即可解封 等待无果，更换v2ray+cdn+ws代理方案  0x02 bandwagonhost服务器安装v2ray  我的搬瓦工vps是3.99传家宝套餐，64M运行内存，2G磁盘空间，100G流量 需要在kvm面板上安装debian或ubuntu系统 需要注意的是我的vps在安装了debian-8.0-x86_64-minimal后，使用v2ray的官方go.sh脚本安装时，swap空间爆掉了，导致安装意外终止。根据网上的教程调整swap分区无果，于是更换ubuntu-16.04-x86_64系统，安装才得以顺利进行。  环境 临时梯子（用于连接ip被ban的vps） 工具 PuTTy  sudo su 获取root权限 在控制台输入bash &amp;lt;(curl -L -s https://install.direct/go.sh)，此命令主要下载go.sh脚本并运行自动安装 控制台提示V2Ray v4.19.1 is installed.即为安装成功 记下控制台中的PORT和UUID的值  配置v2ray服务端  v2ray使用脚本安装完成后，默认启动服务就可以使用的了，但我们为了使用websock协议，还需要配置一下 打开v2ray的配置文件（/etc/v2ray/config.json）参照下面的进行配置。 只需在port和id这两个属性中填入你之前安装v2ray时记下来的值即可。（若需要CloudeFlare进行CDN转发，port则需要配置成CloudFlare支持的端口，在CloudFlare配置部分有详细说明） log配置是我后来加上的，不需要打日志的可以去掉。  { &amp;quot;log&amp;quot;: { &amp;quot;loglevel&amp;quot;: &amp;quot;debug&amp;quot;, &amp;quot;access&amp;quot;: &amp;quot;/var/log/v2ray/access.log&amp;quot;, &amp;quot;error&amp;quot;: &amp;quot;/var/log/v2ray/error.log&amp;quot; }, &amp;quot;inbounds&amp;quot;: [{ &amp;quot;port&amp;quot;: port, &amp;quot;protocol&amp;quot;: &amp;quot;vmess&amp;quot;, &amp;quot;settings&amp;quot;: { &amp;quot;clients&amp;quot;: [ { &amp;quot;id&amp;quot;: &amp;quot;UUID&amp;quot;, &amp;quot;level&amp;quot;: 1, &amp;quot;alterId&amp;quot;: 64 } ] }, &amp;quot;streamSettings&amp;quot;:{ &amp;quot;wsSettings&amp;quot;:{ &amp;quot;path&amp;quot;:&amp;quot;/&amp;quot;, &amp;quot;headers&amp;quot;:{} }, &amp;quot;network&amp;quot;:&amp;quot;ws&amp;quot; } }], &amp;quot;outbounds&amp;quot;: [{ &amp;quot;protocol&amp;quot;: &amp;quot;freedom&amp;quot;, &amp;quot;settings&amp;quot;: {} },{ &amp;quot;protocol&amp;quot;: &amp;quot;blackhole&amp;quot;, &amp;quot;settings&amp;quot;: {}, &amp;quot;tag&amp;quot;: &amp;quot;blocked&amp;quot; }], &amp;quot;routing&amp;quot;: { &amp;quot;rules&amp;quot;: [ { &amp;quot;type&amp;quot;: &amp;quot;field&amp;quot;, &amp;quot;ip&amp;quot;: [&amp;quot;geoip:private&amp;quot;], &amp;quot;outboundTag&amp;quot;: &amp;quot;blocked&amp;quot; } ] } }  启动v2ray服务端  在控制台输入service v2ray start启动服务即可 v2ray服务端的配置到此完成，需要注意的是，如果是谷歌云、亚马逊云或者其他服务商的需要在防火墙放行v2ray服务的端口。  0x03 配置CloudFlare CDN 准备个人邮箱以及域名  上CloudFlare注册账号，添加域名，选择免费的套餐（每个CloudeFlare仅对一个域名提供免费服务） 将域名的DNS服务器修改为CloudFlare提供的DNS服务器（DNS服务器修改生效最长需要72小时） 在CloudFlare的DNS中添加解析记录（CDN解析生效需要稍等片刻）</description>
    </item>
    
    <item>
      <title>MFC FormView中的OnInitialUpdate不调用</title>
      <link>http://blog.sinowrt.cn/2018/2018-12-11t1541-formview-oninitialupdate/</link>
      <pubDate>Tue, 11 Dec 2018 15:41:27 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-12-11t1541-formview-oninitialupdate/</guid>
      <description> 0x00 在Formview中的OnInitialUpdate中初始化了个自定义的按钮，但是运行无任何样式效果 0x01 在OnInitialUpdate里打了个断点再次运行，发现此方法根本未调用 0x02 在FormView Create后，手动调用OnInitialUpdate解决，如下所示 CWnd* pFrameWnd = this; CCreateContext pContext; pContext.m_pCurrentDoc = 0; pContext.m_pNewViewClass = RUNTIME_CLASS(View_OnlineShopManagement); View_OnlineShopManagement* pView = (View_OnlineShopManagement*)((CFrameWnd*)pFrameWnd)-&amp;gt;CreateView(&amp;amp;pContext); pView-&amp;gt;ShowWindow(SW_NORMAL); pView-&amp;gt;OnInitialUpdate(); //手动调用  </description>
    </item>
    
    <item>
      <title>MFC Dialog中嵌入Formview 初始化控件时m_hWnd为空</title>
      <link>http://blog.sinowrt.cn/2018/2018-12-11t1435-formview-m_hwnd/</link>
      <pubDate>Tue, 11 Dec 2018 14:35:00 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-12-11t1435-formview-m_hwnd/</guid>
      <description> 原因：在构造函数中进行控件的初始化 解决方法：Formview中，控件的初始化应该放在OnInitialUpdate中 </description>
    </item>
    
    <item>
      <title>MFC Dialog中嵌入Formview 0XC000041D:用户回调期间遇到未经处理的异常</title>
      <link>http://blog.sinowrt.cn/2018/2018-12-11t1430-formview-0xc000041d/</link>
      <pubDate>Tue, 11 Dec 2018 14:30:47 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-12-11t1430-formview-0xc000041d/</guid>
      <description>在填充Formview时，遇到0XC000041D:用户回调期间遇到未经处理的异常(已解决) 原因：HBRUSH hbr = OnCtlColor(pDC, pWnd, nCtlColor);这一句中应该在OnCtlColor前面添加命名空间:: 否则编译器会误解为递归函数 源码如下： #pragma once #include &amp;quot;NormalBtn.h&amp;quot; #include &amp;quot;resource.h&amp;quot; #include &amp;lt;Gdiplus.h&amp;gt; using namespace Gdiplus; // View_OnlineShopManagement 窗体视图 class View_OnlineShopManagement : public CFormView { DECLARE_DYNCREATE(View_OnlineShopManagement) protected: View_OnlineShopManagement(); // 动态创建所使用的受保护的构造函数 virtual ~View_OnlineShopManagement(); public: #ifdef AFX_DESIGN_TIME enum { IDD = IDD_FORMVIEW_OSM }; #endif #ifdef _DEBUG virtual void AssertValid() const; #ifndef _WIN32_WCE virtual void Dump(CDumpContext&amp;amp; dc) const; #endif #endif protected: virtual void DoDataExchange(CDataExchange* pDX); // DDX/DDV 支持 DECLARE_MESSAGE_MAP() public: virtual void OnInitialUpdate(); GdiplusStartupInput m_gdiplusStartupInput; ULONG_PTR m_gdiplusToken; afx_msg HBRUSH OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor); virtual void OnDraw(CDC* /*pDC*/); };  // View_OnlineShopManagement.</description>
    </item>
    
    <item>
      <title>Win10装光驱位硬盘分区不显示</title>
      <link>http://blog.sinowrt.cn/2018/2018-12-03t1258-hard-disk-parttion-unview/</link>
      <pubDate>Mon, 03 Dec 2018 12:58:57 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-12-03t1258-hard-disk-parttion-unview/</guid>
      <description> 0x00 前阵子用旧电脑装了个群晖nas，无奈用的120G硬盘，完全不够用，看手上还有个500G的三星机械盘，就买了个光驱硬盘盒，到手后插上电脑没显示分区？不兼容？盘坏了？ 0x01 打开设备管理器，扫描硬件更新，可以看到三星机械盘，盘和架子应该没问题 0x02 打开partition wizard,可以看到硬盘基本信息都在，就是没有盘符 0x03 分配盘符后，可以看到电脑显示分区正常，应该是没有挂载 0x04 也可以利用diskpart对卷进行挂载 0x05 Z盘挂载成功 </description>
    </item>
    
    <item>
      <title>Qt5 error LNK2019 无法解析的外部符号的解决方法</title>
      <link>http://blog.sinowrt.cn/2018/2018-11-17t1516-qt5compile-error/</link>
      <pubDate>Sat, 17 Nov 2018 15:16:56 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-11-17t1516-qt5compile-error/</guid>
      <description> 编译过程中连接错误 尝试删除build文件夹，问题解决 </description>
    </item>
    
    <item>
      <title>Windows 10安装Qt5.11.2</title>
      <link>http://blog.sinowrt.cn/2018/2018-11-17t1513-install-qt5-on-win10/</link>
      <pubDate>Sat, 17 Nov 2018 15:13:11 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-11-17t1513-install-qt5-on-win10/</guid>
      <description> 0x00背景 信管作业要求用C++实现进销存系统用户交互界面以及业务逻辑 0x01 必备安装包 1.qt-opensource-windows-x86-5.11.2.exe 2.Windows SDK 0x02 下载与安装 1.Qt下载与安装  上Qt下载页面下载你系统对应的安装包
 我的是Windoes 10,直接下载qt-opensource-windows-x86-5.11.2.exe 直接打开qt-opensource-windows-x86-5.11.2.exe安装程序 在第一个界面直接下一步 填写账号这一块，如果没有事先申请也可以先跳过这一步
 选择安装文件夹 选择编译器，由于我的电脑装了vs2015，所以直接选了MSVC 2015 64-bit（若未安装任何编译器可以直接选择MinGW 5.3.0 32bit）
 接下来一路下一步即可  2.Windows SDK下载与安装  上Microsoft开发者下载站 我的系统是Windows 10，还是按自己的系统版本进行下载
 下载之后得到这样一个exe，打开按步骤安装   0x03 配置Qt 1.配置Debugger  工具——选项——kits——Debuggers——Add 填写Debugger的名称 浏览WindowsSKD的安装路径，找到你所需要的Debugger，这里我设置了Windows 10的x64的和x86的cdb.exe
2.配置kit 按根据截图按需配置就可以了
  到了这步配置基本完成，但是我在编译程序的过程中遇到error link1158 无法运行rc.exe的报错 error link1158 无法运行rc.exe问题解决方法  到C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0下的文件夹找到rc.dll和rc.exe复制到qmake文件夹下 qmake的路径可以参考截图
  </description>
    </item>
    
    <item>
      <title>利用docker为群晖部署aria2下载工具</title>
      <link>http://blog.sinowrt.cn/2018/2018-11-06t0207-synologysetup-aria2-with-docker/</link>
      <pubDate>Tue, 06 Nov 2018 02:07:21 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-11-06t0207-synologysetup-aria2-with-docker/</guid>
      <description> 0x00 安装docker  在package center中的Third party找到docker 直接点击install进行安装
 安装完毕，点击open即可打开docker
0x01 下载aria2映像 点击Registry选项卡，搜索aria2
 找到xujinkai那个下载下来
0x02 启动容器 点击image选项卡，点击launch进行启动
0x03 启动设置 点击Advance 1）Advance Setting 打上这两个√，设置开机自启动以及创建桌面快捷方式 2）Volume设置，添加这两项，前面的文件夹随便选，圈起来的位置务必一样 3）Port设置，为了方便使用，local port修改成您想要的端口 第一项为下载端口
 第二项为webui端口
 第三项为下载文件目录端口
  4）Environment设置 如图添加这两项，否则webui会报错，分别填写你的用户名和密码，ok 5）完成高级设置后，next 6）最后apply 7）打开浏览器，输入服务器地址以及你设置的webui端口，即可访问aria2 webui </description>
    </item>
    
    <item>
      <title>自定义黑群晖6.X.X引导系统版本</title>
      <link>http://blog.sinowrt.cn/2018/2018-11-04t1218-synalogycustomize-boot-system/</link>
      <pubDate>Sun, 04 Nov 2018 12:18:36 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-11-04t1218-synalogycustomize-boot-system/</guid>
      <description> 0x00 打开osfmount 0x01 挂载引导文件  选择img文件 填写offset为16MBytes 去掉read—only前面的勾 点击ok进行挂载
  0x02 解压目标系统文件  将xxxxxxx.pat的后缀改成rar 解压 从解压得到的文件夹里面找到rd.gz和zlmage 复制这两个文件到虚拟磁盘根目录下替换原文件  0x03 卸载虚拟磁盘 0x04 将img文件通过Win32DiskImager写入U盘即可 </description>
    </item>
    
    <item>
      <title>旧笔记本安装黑群晖NAS系统——打造属于自己的私有云</title>
      <link>http://blog.sinowrt.cn/2018/2018-11-04t1148-synologynas-diy/</link>
      <pubDate>Sun, 04 Nov 2018 11:48:41 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-11-04t1148-synologynas-diy/</guid>
      <description>0x00 硬件条件 1.废旧的三星rv415笔记本电脑  CPU AMD Fusion APU E-450 RAM DDR3 2G 800MHz
2.SANDISK U盘 32G 一个  0x02 软件条件 1.群晖6.x.x引导文件 2.OSFmount 用于挂载引导镜像便于修改 3.Win32DiskImager 将引导文件写入U盘 4.群晖6.1-15047系统文件 5.群晖助手 0x03 网络拓扑 0x04 安装过程 1.安装之前建议先把硬盘格了再进行全新安装 2.制作引导系统 1）挂载img文件  安装osfmount 打开osfmount，对img文件进行挂载，如下所示
   选择img文件 填写offset如图所示，选择单位KBytes 去掉read-only前面的勾 点击OK即挂载成功
  2）查看U盘vid与pid  打开设备管理器，找到你的U盘
 双击打开 打开详细信息选项卡，属性下拉选择硬件id，就可以直接看到vid与pid
  3）修改img文件里的vid与pid  打开刚刚挂载成功的磁盘 用notepad++打开grub文件夹下的grub.cfg文件 修改第22行和23行的vid、pid为你U盘对应的数值
 修改保存之后即可卸载刚刚挂载的设备
  4）打开Win32DiskImager将img文件写入U盘  选择刚刚修改好的img文件 点击写入即可
  5）用网线将准备安装群晖系统的电脑连入局域网内 6）进入bios将你的电脑启动首选项设置为U盘启动  每台机器都不一样，大家可以google一下 要注意的是，这步很重要，到安装完成重启的过程中，没有选择U盘启动，而由硬盘启动的话，将会引导失败，出现联机失败的错误  7）打开群晖助手搜索局域网内的准备安装群晖系统的机器 * 右键安装，注意一定要选择跟版本号以及型号都一致的pat，否则会出错 * PS:6.</description>
    </item>
    
    <item>
      <title>用prism为WordPress页面实现代码高亮</title>
      <link>http://blog.sinowrt.cn/2018/2018-10-20t1037-wordpresscode-highlight-with-prism/</link>
      <pubDate>Sat, 20 Oct 2018 10:37:42 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-10-20t1037-wordpresscode-highlight-with-prism/</guid>
      <description> 0x01 下载prism的css与js文件  在prism官网下载prism的css与js文件  0x02 ssh方式登陆服务器  在路径/wordpress/htdocs/wp-content/themes/你的主题名称/路径下创建prism文件夹 将prism.css与prism.js两个文件上传到prism文件夹中  0x03 修改functions.php  在/wordpress/htdocs/wp-content/themes/你的主题名称/下找到functions.php vi修改文件，添加以下语句：  function add_prism() { wp_register_style( &#39;prismCSS&#39;, get_stylesheet_directory_uri() . &#39;/prism/prism.css&#39; //自定义路径 ); wp_register_script( &#39;prismJS&#39;, get_stylesheet_directory_uri() . &#39;/prism/prism.js&#39; //自定义路径 ); wp_enqueue_style(&#39;prismCSS&#39;); wp_enqueue_script(&#39;prismJS&#39;); } add_action(&#39;wp_enqueue_scripts&#39;, &#39;add_prism&#39;);  0x04注意  get_stylesheet_directory_uri()与get_parent_theme_file_path( &#39;/inc/color-patterns.php&#39; )的区别 使用get_parent_theme_file_path( &#39;/prism/prism.css&#39; )语句之后发现页面代码高亮没生效 通过chrome F12调试 发现prism.css与prism.js没加载成功 细看发现请求路径不对劲 修改成get_stylesheet_directory_uri().&#39;/prism/prism.js&#39;之后代码高亮生效  </description>
    </item>
    
    <item>
      <title>newifi mini安装drcom全攻略</title>
      <link>http://blog.sinowrt.cn/2018/2018-10-19t0256-drcom-setup-of-newifi_mini/</link>
      <pubDate>Fri, 19 Oct 2018 02:56:07 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-10-19t0256-drcom-setup-of-newifi_mini/</guid>
      <description>起始条件：  刷入breed的newifi mini一台 网线一根  后续部署  刷入pandorabox r355固件 配置无线名、密码 在/etc/opkg.conf后追加  arch all 100 arch ramips_24kec 200 arch ramips 300  离线安装python环境  分别下载  libgcc_4.8-linaro-1_ramips_24kec.ipk libc_0.9.33.2-1_ramips_24kec.ipk libpthread_0.9.33.2-1_ramips_24kec.ipk zlib_1.2.8-1_ramips_24kec.ipk libffi_3.0.13-1_ramips_24kec.ipk python-mini_2.7.3-2_ramips_24kec.ipk   将上述ipk放到tmp目录下 依次安装 安装完毕可以在putty中输入 python 以检验是否安装成功  安装drcom客户端  将drcom客户端的python脚本放入/usr/bin中（注意，此脚本为改动后的命令行脚本），将权限改为0755 输入python /usr/bin/drcom -u 你的账号 -p 你的密码，回车，在浏览器验证是否能成功登录上网  安装drcom_client可视化配置界面  复制drcom(etc_config)到括号中的路径，并去掉括号以及括号中的路径 复制drcom.lua(usr_lib_lua_luci_controller)到括号中的路径，并去掉括号以及括号中的路径，更改为0755权限 复制drcom.lua(usr_lib_lua_luci_model_cbi)到括号中的路径，并去掉括号以及括号中的路径，更改为0755权限 复制drcom.lua(usr-lib-lua-luci-model-cbi-admin_services)到括号中的路径，并去掉括号以及括号中的路径，更改为0755权限 复制drcom_client(etc_init.d)到括号中的路径，并去掉括号以及括号中的路径，更改为0755权限 重启路由  配置drcom_client  进入luci管理界面 在服务中找到drcom_client单击进入 填入drcom的账号和密码 save&amp;amp;apply 打开浏览器打开任意网页验证是否登录成功  配置自启动  在/etc/hotplut.</description>
    </item>
    
    <item>
      <title>init.d 的 脚本中使用 kill 的怪事</title>
      <link>http://blog.sinowrt.cn/2018/2018-10-17t0552-init.dkill/</link>
      <pubDate>Wed, 17 Oct 2018 05:52:17 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-10-17t0552-init.dkill/</guid>
      <description>2018.08.20 使用自动安装drcom的shell脚本之后，打开配置界面，进行认证之后，想起昨晚有那么一瞬间发现，在drcom的luci界面配置以及apply之后，ps -w会出现两条python drcom的进程，于是再次打开putty查看，果然不出所料，于是就有了这篇文章 #!/bin/sh /etc/rc.common run_drcom() { local username local password config_get username $1 username config_get password $1 password python /usr/bin/drcom -u $username -p $password &amp;amp; } start() { config_load drcom config_foreach run_drcom login } stop() { ps w | grep &amp;quot;.*drcom.*&amp;quot; | grep -v &#39;grep&#39; | cut -c 2-5 | xargs kill -9 echo &amp;quot;Drcom Client for GDUFE has stoped.&amp;quot; }   大二的时候，在写了drcom的luci界面之后，发现有时候使用drcom_client的stop命令会不奏效，经过查看代码，发现问题应该出在cut -c 2-5上
for example cut -c 2-5 是截取了第二到第五位的字符串 即4位pid 若pid大于4位之后便不再好使  我有印象当时已经改正了，这次出现的 drcom_client 脚本，便是原原本本的当年的模样，至于为什么会这样，可能当时我只改了路由器上的脚本，而没有更新本地脚本</description>
    </item>
    
    <item>
      <title>给宿舍装个智能锁吧（二）——指纹篇</title>
      <link>http://blog.sinowrt.cn/2018/2018-10-17t0348-smartlock2/</link>
      <pubDate>Wed, 17 Oct 2018 03:48:52 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-10-17t0348-smartlock2/</guid>
      <description>2018/3/13  星期二晚上到货 取开发资料 浏览用户手册  2018/3/14  根据用户手册进行模块接线 接入串口，利用开发包中的上位机对指纹模块进行操作 用串口调试软件，输入相应的指令，进行指纹采集等操作，但进行相应的操作总是无法实现 原因：对原有指令进行了改造，而校验码并没有改变 对上位机软件进行改造，使其输出相应操作流程的指令
在OEMHostDlg.cpp中查找对应的按钮执行的内容 1.找到void COEMHostDlg::OnBtnVerify()
  void COEMHostDlg::OnBtnVerify() { int w_nRet, w_nTmplNo, w_nFpStatus, w_nLearned; DWORD w_dwTime; CString w_strTmp; UpdateData(TRUE); if (!CheckUserID()) return; EnableControl(FALSE); GetDlgItem(IDC_BTN_DISCONNECT)-&amp;gt;EnableWindow(FALSE); GetDlgItem(IDC_BTN_STOP)-&amp;gt;EnableWindow(TRUE); m_bCancel = FALSE; w_nTmplNo = m_nUserID; //. Check if fp is exist w_nRet = m_clsCommu.Run_GetStatus(w_nTmplNo, &amp;amp;w_nFpStatus); if( w_nRet != ERR_SUCCESS ) { m_strCmdResult = GetErrorMsg(w_nRet); goto l_exit; } if( w_nRet == ERR_SUCCESS &amp;amp;&amp;amp; w_nFpStatus == GD_TEMPLATE_EMPTY ) { m_strCmdResult = _T(&amp;quot;Template is empty&amp;quot;); goto l_exit; } m_clsCommu.</description>
    </item>
    
    <item>
      <title>ubuntu 16.04部署ss</title>
      <link>http://blog.sinowrt.cn/2018/2018-10-16t1040-ubuntu/</link>
      <pubDate>Tue, 16 Oct 2018 10:40:36 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-10-16t1040-ubuntu/</guid>
      <description> 2018/04/06  准备部署亚马逊云的ss服务端，无意中看到有一张8刀的未付账单 经过查看账单详情，发现美国的俄亥俄州的服务器还没关闭，导致东京和美国的服务器同时开启，当然超出了亚马逊云的免费范围，所以对于国外的云服务器还是要定时上去查看一下，以防意外扣费的发生
 本篇主要是对ubuntu 16.04上部署ss服务端进行记录的的过程
  准备工作  利用putty的puttygen对亚马逊云派发的秘钥文件*.pem转换为putty能识别的ppk文件 启动putty，在ssh的auth中浏览文件夹选中刚才转换出来的ppk文件 填写服务器地址以及默认用户名ubuntu@ip地址 填写ssh端口22 若要进行ping检测，则需要在安全组中添加icmp入站规则 对该配置进行保存以便日后维护  正式部署  首先在终端输入sudo apt-get update 更新源 接着安装pip3，输入sudo apt install python3-pip 安装ss，输入sudo pip3 install shadowsocks 配置ss，输入sudo vi /etc/shadowsocks 在vi中输入ss的配置如下所示：  { &amp;quot;server&amp;quot;:&amp;quot;0.0.0.0&amp;quot;, &amp;quot;server_port&amp;quot;:444, &amp;quot;local_address&amp;quot;:&amp;quot;127.0.0.1&amp;quot;, &amp;quot;local_port&amp;quot;:1080, &amp;quot;password&amp;quot;:&amp;quot;mypasswd&amp;quot;, &amp;quot;timeout&amp;quot;:300, &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;, &amp;quot;fast_open&amp;quot;:false }  保存退出
 如果ss不是安装在/usr/bin或/usr/local/bin,要先查看ss的路径，输入whereis ssserver（故建议在安装ss前先cd /usr/bin）
 将查询到的路径复制，输入sudo vi /etc/sudoers，粘贴到secure_path后面，以冒号分隔强制保存退出即可
 最后输入sudo ssserver -c /etc/shadowsocks.json -d start &amp;amp;启动ss 服务即可用客户端进行连接
  </description>
    </item>
    
    <item>
      <title>给宿舍装个智能门锁吧（一）</title>
      <link>http://blog.sinowrt.cn/2018/2018-10-16t0811-smartlock/</link>
      <pubDate>Tue, 16 Oct 2018 08:11:56 +0000</pubDate>
      
      <guid>http://blog.sinowrt.cn/2018/2018-10-16t0811-smartlock/</guid>
      <description>初步部署 2018.1.27  舵机安装，用热熔胶将SG92R 9g小型舵机粘到门锁旁，舵机牵扯尼龙绳实现开锁动作 利用原有的papersignals固件对舵机开门的可行性进行测试，发现舵机在门锁有阻力的情况下，在舵机通电一刻仍能高效开锁 对该项目的架构进行构思  1.借鉴papersignals项目：  esp8266充当客户端，定时请求服务端获取json数据
 手机端发送请求到达服务端，服务端解析请求并修改本地json数据
 从而达到伪装实时开锁的目的  工作与过年原因项目搁置许久 2.构思内网穿透方案  利用pandorabox的可扩展性，安装内网穿透客户端ngrok
 在搬瓦工vps上安装ngrokd服务端
 抛弃papersignals的类似方式，将esp8266作为服务端，手机作为客户端 鉴于小程序的跨平台特性，决定采用小程序的方式进行手机端开发  在搬瓦工vps搭建ngrok服务端的过程  参考这篇博客在vps上进行ngrok的编译
 该博客中遇到的问题，我全都遇到了，按照相应的步骤操作即可解决 另外在go1.4安装操作步骤混乱的时候，造成goroot路径的错乱，从而无法安装上go1.4和go1.6，只需要unset GOROOT即可 一切安装就绪，卡在ngrok的go编译上，在编译过程中报错：go build project/test: signal: killed 查阅资料，发现是vps内存太小导致的无法编译 改用centos进行编译，但是只有visualbox的centos镜像，而visualbox复制文件上面完全比不上vmware方便，所以改用ubuntu进行ngrok编译。 在ubuntu中部署ngrok编译环境的时候，使用yum命令，发现yum是centos专用的安装命令，在ubuntu上使用会导致很多问题的发生，例如yum的源不知如何配置，所以用回apt命令 由于无法使用yum，造成很多依赖包无法安装上，所以无法安装上官网下载的go1.10包 查找资料发现可以使用sudo apt-get install go-lang命令直接安装go环境，若找不到直接apt update更新源即可 开启sslocal，把ngrok项目从git中拉下来 对ngrok项目进行编译 其中最重要的是$NGROK_DOMAIN的设置，在该教程中直接关系到openssl证书的生成 编译出ngrokd服务端 丢进vps中跑一下 问题：80端口和443端口的占用 解决：启动ngrok命令中修改-httpAddr以及httpsAddr 以更改监听端口，4443为透传接入端口，更改之后直接启动即可，在浏览器中输入www.sinowrt.cn:81 出现trunnel&amp;hellip;的即表示启动成功 编译出windows的客户端，windows的客户端必须要在cmd中才能运行，新建ngrok.cfg,将内容  server_addr: &amp;quot;www.sinowrt.cn:4443&amp;quot; trust_host_root_certs: false  写入该文件中，在cmd进入该目录，敲入命令
ngrok.exe -config=&amp;quot;ngrok.cfg&amp;quot; -subdomain=&amp;quot;abc&amp;quot; 80  连接上ngrok服务端即可将本地的80端口暴露出外网</description>
    </item>
    
  </channel>
</rss>