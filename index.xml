<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sinowrt on Sinowrt</title>
    <link>http://blog.sinowrt.cn/</link>
    <description>Recent content in Sinowrt on Sinowrt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Apr 2021 18:47:00 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>在树莓派（ARM）上面运行hpool的chia挖矿程序（AMD64）</title>
      <link>http://blog.sinowrt.cn/2021/2021-04-23t1847-how-to-run-chia-miner-of-hpool-on-raspberry-pi4/</link>
      <pubDate>Fri, 23 Apr 2021 18:47:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-04-23t1847-how-to-run-chia-miner-of-hpool-on-raspberry-pi4/</guid>
      <description>

&lt;h2 id=&#34;0x00-背景&#34;&gt;0x00 背景&lt;/h2&gt;

&lt;p&gt;最近chia挖矿可太火了，可惜我运气太差，一个币都没挖到，算了还是直接加入矿池吧。可是硬盘容量已经p完了，用台式机挂机的话，怕是电费都不够亏吧。&lt;br /&gt;
之前在chia的wiki上面，我看到了一个用Rock PI4b组装的矿机，很是心动。可惜Rock pi的生态比Raspberry pi逊色很多，而我又不使用官方软件进行耕种，到时各种适配起来可是个麻烦事。所以，在对比之下我还是选择了Raspberry Pi4B。&lt;/p&gt;

&lt;h2 id=&#34;0x01-硬件准备&#34;&gt;0x01 硬件准备&lt;/h2&gt;

&lt;h3 id=&#34;1-一块树莓派raspberry-pi4b&#34;&gt;1. 一块树莓派Raspberry Pi4B&lt;/h3&gt;

&lt;h3 id=&#34;2-sata转usb3-0的易驱线-带12v供电端口的-我选择的是绿巨能的-便宜好用&#34;&gt;2. sata转usb3.0的易驱线（带12v供电端口的）我选择的是绿巨能的，便宜好用&lt;/h3&gt;

&lt;h3 id=&#34;3-atx电源一个-根据你硬盘的数量来选择功率-我这里用的是家里闲置的200w-长城电源&#34;&gt;3. ATX电源一个（根据你硬盘的数量来选择功率）我这里用的是家里闲置的200W 长城电源&lt;/h3&gt;

&lt;h3 id=&#34;4-大4pin接口转3-5mm-12v-dc接口-转接线若干条&#34;&gt;4. 大4Pin接口转3.5mm 12V DC接口 转接线若干条&lt;/h3&gt;

&lt;h2 id=&#34;0x02-兜兜转转-仅记录过程-解决方案可以直接看下一节&#34;&gt;0x02 兜兜转转（仅记录过程 解决方案可以直接看下一节）&lt;/h2&gt;

&lt;p&gt;将可执行文件上传到树莓派上面，直接运行的时候 会提示&lt;code&gt;Exec Format Error&lt;/code&gt;，因为树莓派是ARM架构的，而可执行文件是AMD64架构的。&lt;br /&gt;
可执行文件的信息可以使用&lt;code&gt;file 可执行文件&lt;/code&gt;查看，如hpool-miner-chia这个可执行文件的信息就是：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ubuntu@ubuntu:~/linux$ file ./hpool-miner-chia 
./hpool-miner-chia: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, Go BuildID=or4EJC7edY1jm53BAfGR/s_m3PpAuyo9gsjpS3x4h/Eg54hBo5Pfw4tHBF5qZ0/g1_NAK8AbL3R_FIeKSr6, stripped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以使用readelf命令查看，如&lt;code&gt;readelf -h python&lt;/code&gt;，得到的是ELF Header中的项Magic，第五个数 02时为64位，01时为32位。&lt;/p&gt;

&lt;h3 id=&#34;1-box86方案&#34;&gt;1. box86方案&lt;/h3&gt;

&lt;p&gt;第一次尝试是在raspberry os上面安装box86，但是运行的时候发现box86并不支持64位可执行文件，遂作罢。&lt;/p&gt;

&lt;h3 id=&#34;2-exagear方案&#34;&gt;2. exagear方案&lt;/h3&gt;

&lt;p&gt;这个方案并未尝试，因为exagear 跟box86一样，只支持32位的可执行文件。&lt;/p&gt;

&lt;h3 id=&#34;3-qemu方案&#34;&gt;3. qemu方案&lt;/h3&gt;

&lt;p&gt;使用&lt;code&gt;sudo apt-get install qemu-user&lt;/code&gt;命令安装qemu-user，这个命令会自动安装qemu-user和binfmt，binfmt会通过判断可执行文件的类型，自动选择是否通过qemu来执行该文件。&lt;/p&gt;

&lt;p&gt;这个方案虽然是可行的，但是探索的过程也是十分曲折：&lt;/p&gt;

&lt;p&gt;环境: 32位raspios + qemu-user + hpool-miner-chia v1.0.5&lt;br /&gt;
启动的时候提示：dlopen err: Dynamic loading not supported&lt;br /&gt;
然后就是不认plot文件，报open fail 和 Invalid file的错误，但是连接矿池正常，只是没认到plot文件，没有算力，hpool上面也不显示矿机在线。&lt;/p&gt;

&lt;p&gt;环境: 32位raspios + qemu-user + hpool-miner-chia v1.0.4.1&lt;br /&gt;
启动的时候不提示dlopen err: Dynamic loading not supported了&lt;br /&gt;
但仍然不认plot文件，报open fail 和 Invalid file的错误，但是连接矿池正常，只是没认到plot文件，没有算力，hpool上面也不显示矿机在线。&lt;/p&gt;

&lt;p&gt;环境: 64位raspios + qemu-user + hpool-miner-chia v1.0.4.1&lt;br /&gt;
启动的时候提示&lt;code&gt;qemu: uncaught target signal 11 (Segmentation fault) - core dumped&lt;/code&gt; 直接罢工了&lt;/p&gt;

&lt;p&gt;在28号下午，hpool 发布了 1.1.0 版本的 hpool-miner-chia，由于官方说下一个版本会支持arm，但是实测并没有，没有就没有吧，试一下能不能用qemu运行&lt;/p&gt;

&lt;p&gt;环境: 32位raspios + qemu-user + hpool-miner-chia v1.1.0&lt;br /&gt;
启动的时候不提示dlopen err: Dynamic loading not supported了&lt;br /&gt;
但仍然不认plot文件，报open fail 和 Invalid file的错误，但是连接矿池正常，只是没认到plot文件，没有算力，hpool上面也不显示矿机在线。&lt;/p&gt;

&lt;h2 id=&#34;0x04-最终方案&#34;&gt;0x04 最终方案&lt;/h2&gt;

&lt;p&gt;我曾一度想着是不是 usb3.0转sata 转接线坏了，就在虚拟机上面开了ubuntu，连上了硬盘，运行一切正常。&lt;/p&gt;

&lt;p&gt;那么问题应该就是出在树莓派上面了，由于之前下载了ubuntu arm64的系统，但是那晚上挂着测试树莓派稳定性的时候，把TF卡烧了，就没有用过这个ubuntu系统。然后我就想，会不会跟系统有关呢，试了那么多个版本的可执行文件都是一个结果。于是拆下TF卡，烧录ubuntu arm64的系统，挂硬盘&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 查看待挂载设备列表
sudo fdisk -l

# 挂载硬盘 我在这里是将/dev/sda1挂载到当前目录的ploted文件夹 
sudo mount /dev/sda1 ./ploted

# 解除挂载
sudo umount /dev/sda1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;硬盘挂载好后，把hpool-miner-chia v1.1.0 版本的执行文件上传上去，安装qemu-user。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;qemu-x86_64 ./hpool-miner-chia&lt;/code&gt;运行。竟然好了！！&lt;/p&gt;

&lt;p&gt;虽然不报错，也能认plot文件了，但是挂了一晚上测试发现，这个软件会自己退出。&lt;/p&gt;

&lt;p&gt;这好办，上supervisor就好了，具体步骤请参考&lt;a href=&#34;https://blog.sinowrt.cn/2020/2020-04-12t2330-ubuntuadd-ngrok-to-supervisor/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;这篇博客&lt;/a&gt;自行配置。&lt;/p&gt;

&lt;p&gt;最后附上ubuntu的版本: ubuntu-20.04.2-preinstalled-server-arm64+raspi.img.xz&lt;/p&gt;

&lt;p&gt;聪明的彦祖们应该知道怎么下载的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何将群晖的软件包和资料转移到另一个硬盘</title>
      <link>http://blog.sinowrt.cn/2021/2021-04-22t1330-how-to-move-the-package-and-documents-in-synology-to-another-hard-disk/</link>
      <pubDate>Thu, 22 Apr 2021 13:30:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-04-22t1330-how-to-move-the-package-and-documents-in-synology-to-another-hard-disk/</guid>
      <description>

&lt;h2 id=&#34;0x00-背景&#34;&gt;0x00 背景&lt;/h2&gt;

&lt;p&gt;最近网上刮起了chia风，由于手上也有大容量硬盘，但是挂在群晖上做存储盘，于是想将这个盘腾出来，将资料转移到另一个硬盘中。&lt;/p&gt;

&lt;h2 id=&#34;0x01-过程&#34;&gt;0x01 过程&lt;/h2&gt;

&lt;h3 id=&#34;1-添加新硬盘&#34;&gt;1. 添加新硬盘&lt;/h3&gt;

&lt;p&gt;首先需要准备一个完全擦除的硬盘，将群晖关机后，将该硬盘接入群晖。启动群晖之后，打开Storage Manager新建一个raid group（我原来是用单盘建立的basic raid group），建立好后再新建一个Volume，如果勾选了全盘扫描的话，需要等待一段时间才能建好。&lt;/p&gt;

&lt;h3 id=&#34;2-转移资料&#34;&gt;2. 转移资料&lt;/h3&gt;

&lt;p&gt;资料的转移比较简单，打开Control Panel - Shared Folder，选择需要转移的共享文件夹，点击Edit，再Location下拉框中选择新建的Volume即可自动转移。&lt;/p&gt;

&lt;h3 id=&#34;3-转移package&#34;&gt;3. 转移package&lt;/h3&gt;

&lt;p&gt;转移package需要用到一个软件MODS Package Manager，我在&lt;a href=&#34;https://www.beatificabytes.be/sspks&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://www.beatificabytes.be/sspks&lt;/a&gt; 上面下载下来，再在Package Center中手动上传安装的。&lt;br /&gt;
在打开Package Manager的时候遇到白屏的问题，原因是该软件的一个JS需要从谷歌下载，打开fq软件代理一下即可解决。（如果没有fq条件的话，也可以参照&lt;a href=&#34;https://blog.csdn.net/qq_17311873/article/details/109536316&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;这篇博客&lt;/a&gt; 改成国内可以访问的cdn即可解决）
软件的使用很简单，选择需要移动的package，然后选择目标Volume，点击Move Package即可。
有些软件在转移过程中会失败，套件没有移动成功，可以不用管它。打开Package Center，会提示该套件错误无法运行，这时候点击修复即可完成套件的转移了。&lt;/p&gt;

&lt;h3 id=&#34;4-转移moments里面的照片&#34;&gt;4. 转移Moments里面的照片&lt;/h3&gt;

&lt;p&gt;Moments的照片是存在/homes 共享目录中的，所以只要将该共享目录按步骤2进行转移即可，这一步也可以在Control Panel - User - User Home - Location的下拉框选择转移到新卷。需要特别注意的是Drive的数据库的转移，打开Drive Admin Console - Settings - Database Location 选择转移到目标卷中即可。（在群晖的官网中又说到，在Storage Manager安全地移除Volume也可以转移数据库，但我选择稳妥一点，手动转移）&lt;/p&gt;

&lt;h3 id=&#34;5-安全移除卷&#34;&gt;5. 安全移除卷&lt;/h3&gt;

&lt;p&gt;最后一步，我是直接关机，将旧盘直接摘下，然后开机看看有没有什么异常，确保数据都安全地转移到了新卷。&lt;br /&gt;
最后再将旧盘装上，在Storage Manager中安全地移除卷，将旧盘取下来。&lt;/p&gt;

&lt;h2 id=&#34;0x02-遇到的问题&#34;&gt;0x02 遇到的问题&lt;/h2&gt;

&lt;p&gt;在转移资料的第4步中，我没有转移Drive的数据库，直接摘下了硬盘，并启动了群晖，在package center上面修复了Drive 和 Moments，导致Moments不可用。&lt;br /&gt;
最后还是将旧盘装上，在Drive Admin Console中转移了数据库，然后将Moments套件连同数据库一起删除，再重装才解决了问题。
这样的话，就丢失了之前Moments索引的信息，没关系直接再索引一遍就好了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用python下载七牛云的图片并批量重命名</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-10t1451-using-python-to-download-pictures-from-qiniu-and-batch-rename/</link>
      <pubDate>Wed, 10 Mar 2021 14:51:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-10t1451-using-python-to-download-pictures-from-qiniu-and-batch-rename/</guid>
      <description>

&lt;h2 id=&#34;0x00-背景&#34;&gt;0x00 背景&lt;/h2&gt;

&lt;p&gt;最近想要搭建一个对象存储服务，并把原本在七牛云上面的图片全部转移到该服务中管理，但是七牛云上面的图片命名本来就很乱，不符合批量管理的要求，所以不能从七牛云直接下载，而是要把图片名格式化一下，再下载下来，这种工作，用python是最适合不过了，于是就有了这篇文章。&lt;/p&gt;

&lt;h2 id=&#34;0x01-过程&#34;&gt;0x01 过程&lt;/h2&gt;

&lt;h3 id=&#34;1-命名规则转换&#34;&gt;1. 命名规则转换&lt;/h3&gt;

&lt;p&gt;原本图片的命名是&lt;code&gt;images/1979-01-01T0000/1.png&lt;/code&gt;这样的格式，现在要统一放在一个文件夹，所以需要去掉images文件夹，并把时间和图片名通过&amp;rdquo;-&amp;ldquo;拼接起来。&lt;/p&gt;

&lt;h3 id=&#34;2-将七牛云上面的文件名及其对应的url列表导出&#34;&gt;2. 将七牛云上面的文件名及其对应的url列表导出&lt;/h3&gt;

&lt;p&gt;这一步可以直接在七牛云上面批量操作，导出的文件是是csv格式的，所以在python中可以使用csv库直接进行读取&lt;/p&gt;

&lt;h3 id=&#34;3-编写代码&#34;&gt;3. 编写代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import requests
import csv

def download_img(img_url, api_token, name):
    print (img_url)
    header = {&amp;quot;Authorization&amp;quot;: &amp;quot;Bearer &amp;quot; + api_token} # 设置http header，视情况加需要的条目，这里的token是用来鉴权的一种方式
    r = requests.get(img_url, headers=header, stream=True)
    print(r.status_code) # 返回状态码
    if r.status_code == 200:
        open(&#39;C:\\Users\\Jacky\\Pictures\\blogpic\\&#39; + name, &#39;wb&#39;).write(r.content) # 将内容写入图片
        print(&amp;quot;done&amp;quot;)
    del r

if __name__ == &#39;__main__&#39;:
    api_token = &amp;quot;apitoken&amp;quot;

    record = csv.reader(open(&#39;urls&#39;, &#39;r&#39;, encoding=&#39;utf-8-sig&#39;))
    for i in record:
        name = i[0]
        # 改名
        name = name[7:].replace(&#39;/&#39;, &#39;-&#39;)
        # 提取图片链接
        url = i[1]
        download_img(url, api_token, name)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;0x02-总结&#34;&gt;0x02 总结&lt;/h2&gt;

&lt;p&gt;非常简单，就封装一个请求函数，然后读取csv文件里面的字段，给图片重命名并把url传入请求函数，把图片下载到指定目录。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用docker安装minio对象存储服务</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-09t2224-how-to-install-minio-with-docker/</link>
      <pubDate>Tue, 09 Mar 2021 22:24:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-09t2224-how-to-install-minio-with-docker/</guid>
      <description>

&lt;h2 id=&#34;0x00-背景&#34;&gt;0x00 背景&lt;/h2&gt;

&lt;p&gt;博客里面的图片之前使用的是七牛云的对象存储，用http协议传输的，自chrome更新之后就出现了强制跳转https的问题，而用新版edge还是可以打开的，但是今天我突然发现edge也不好使了，都会强制跳转https。而七牛云里面的https是收费的，既然我有服务器，有域名那就物尽其用搭一个对象存储服务吧。&lt;/p&gt;

&lt;h2 id=&#34;0x01-过程&#34;&gt;0x01 过程&lt;/h2&gt;

&lt;p&gt;由于我的机器之前已经安装了docker，docker的安装过程就不赘述了，咱们直接从minio安装说起。&lt;/p&gt;

&lt;h3 id=&#34;1-首先把minio的镜像拉下来&#34;&gt;1. 首先把minio的镜像拉下来&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;docker pull minio/minio&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-创建docker-compose-yml文件-写入以下内容&#34;&gt;2. 创建docker-compose.yml文件,写入以下内容&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;version: &#39;3.1&#39;
services: 
    minio:
      image: minio/minio
      container_name: minio
      restart: always
      ports:
        - 9000:9000
      command: server /data  #指定容器中的目录 /data
      environment:
        MINIO_ACCESS_KEY: minio    #管理后台用户名
        MINIO_SECRET_KEY: minioxxx #管理后台密码，最小8个字符
      volumes:
        - ./data:/data              #映射当前目录下的data目录至容器内/data目录
        - ./config:/root/.minio/     #映射配置目录
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-配置证书&#34;&gt;3. 配置证书&lt;/h3&gt;

&lt;p&gt;在腾讯云上面申请了免费的证书，解压后将Apache中的xx.crt和xx.key文件分别改名为public.crt和private.key后放到minio的config/cert文件夹中。&lt;/p&gt;

&lt;h3 id=&#34;4-以deamon模式启动minio服务&#34;&gt;4. 以deamon模式启动minio服务&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-配置访问策略&#34;&gt;5. 配置访问策略&lt;/h3&gt;

&lt;p&gt;网页登录minio，然后新建一个bucket，点击新建的bucket右边三个点，点击Edit policy，prefix填入*，由于该bucket是用作博客的图床的，所以策略选择read only，最后点击Add即可。&lt;/p&gt;

&lt;h2 id=&#34;0x02-遇到的问题&#34;&gt;0x02 遇到的问题&lt;/h2&gt;

&lt;h3 id=&#34;1-浏览器提示err-cert-common-name-invalid错误&#34;&gt;1. 浏览器提示ERR_CERT_COMMON_NAME_INVALID错误&lt;/h3&gt;

&lt;p&gt;这个错误是因为当时没有添加域名解析，直接使用了ip加端口访问，与证书里面的域名不匹配而提示的不安全连接问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>为什么挂载在docker容器中的配置文件在宿主机中修改后却没生效</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-09t1530-why-configuration-file-mounted-in-docker-has-no-effect-after-modified-in-host/</link>
      <pubDate>Tue, 09 Mar 2021 15:30:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-09t1530-why-configuration-file-mounted-in-docker-has-no-effect-after-modified-in-host/</guid>
      <description>

&lt;h2 id=&#34;0x00-背景&#34;&gt;0x00 背景&lt;/h2&gt;

&lt;p&gt;我想在服务器中使用nginx对不同子域名的网页进行分流，于是编辑nginx的配置文件，由于该配置文件从docker里面映射出来了，所以我就只在宿主机里面使用vim修改了配置文件，然后让容器执行命令&lt;code&gt;docker exec -it containerID nginx -s reload&lt;/code&gt;，但是似乎没有生效，于是就有了这篇文章。&lt;/p&gt;

&lt;h2 id=&#34;0x01-过程&#34;&gt;0x01 过程&lt;/h2&gt;

&lt;p&gt;使用命令进入容器里面查看，配置文件没有竟然还是之前的，没有被修改。于是，上去搜索了一下，发现这里面还真有坑。&lt;/p&gt;

&lt;h3 id=&#34;问题原因&#34;&gt;问题原因：&lt;/h3&gt;

&lt;p&gt;docker挂载文件时，并不是挂载了某个文件的路径，而是挂载了对应的文件，即挂载了linux指定的inode文件。&lt;br /&gt;
当使用vim之类的编辑器进行保存时，它不是直接保存文件，而是采用了备份、替换的策略，就是编辑时，是创建一个新的文件，在保存的时候，把备份文件替换源文件，这个时候文件的 inode 就发生了变化，而原来 inode 对应的文件其实并没有修改，也就是容器内的文件没有变化。当重启容器的时候，会挂载新的 inode。&lt;/p&gt;

&lt;h2 id=&#34;0x02-总结&#34;&gt;0x02 总结&lt;/h2&gt;

&lt;p&gt;在docker中应该尽量挂载目录，避免挂载文件。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何解决cannot run bzip2: No such file or directory错误</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-09t0930-cannot-run-bzip2-no-such-file-or-directory/</link>
      <pubDate>Tue, 09 Mar 2021 09:30:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-09t0930-cannot-run-bzip2-no-such-file-or-directory/</guid>
      <description>

&lt;h2 id=&#34;0x00-错误描述&#34;&gt;0x00 错误描述&lt;/h2&gt;

&lt;p&gt;今天在使用tar解压文件的时候，报了一个错
&lt;code&gt;cannot run bzip2: No such file or directory&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;0x01-解决方法&#34;&gt;0x01 解决方法&lt;/h2&gt;

&lt;p&gt;这个错误是因为系统中缺少bzip2，使用yum安装上就好了
&lt;code&gt;yum -y install bzip2&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>怎样查看linux版本</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-08t1833-how-to-check-the-linux-version/</link>
      <pubDate>Mon, 08 Mar 2021 18:33:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-08t1833-how-to-check-the-linux-version/</guid>
      <description>

&lt;h2 id=&#34;0x00-相关命令&#34;&gt;0x00 相关命令&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# 可显示电脑以及操作系统的相关信息
uname -a

# 查看正在运行的内核版本
cat /proc/version

# 查看发行版本信息
cat /etc/issue

# 适用于所有的linux，包括Redhat、SuSE、Debian等发行版，但是在debian下要安装lsb
lsb_release -a
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>navicat 连接 mysql数据库报错Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-08t1412-authentication-plugin-caching_sha2_password-cannot-be-loaded/</link>
      <pubDate>Mon, 08 Mar 2021 16:08:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-08t1412-authentication-plugin-caching_sha2_password-cannot-be-loaded/</guid>
      <description>

&lt;h2 id=&#34;0x00-错误描述&#34;&gt;0x00 错误描述&lt;/h2&gt;

&lt;p&gt;mysql数据库的版本是8.0.17，使用navicat连接的时候报错&lt;code&gt;Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;0x01-解决方法&#34;&gt;0x01 解决方法&lt;/h2&gt;

&lt;p&gt;因为我使用的navicat不支持caching_sha2_password的认证方式，只能在服务器暂时修改为mysql_native_password&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 登录Mysql(需要输入密码)
mysql -u root -p

// 选择数据库(这一步不可省略)
use mysql

// 查看plugin设置
select host, user, plugin from user;

// 可以看到root的plugin是caching_sha2_password，我们希望改成mysql_native_password
ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;xxxxx&#39;;
ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;xxxxx&#39;;

//使生效
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;0x02-注意事项&#34;&gt;0x02 注意事项&lt;/h2&gt;

&lt;p&gt;在navicat连接完毕后，需要改回caching_sha2_password，否则后端连接的时候可能会出现问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>利用xshell将你vps的端口映射到本地主机</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-08t1608-how-to-forward-a-port-in-your-vps-with-xshell/</link>
      <pubDate>Mon, 08 Mar 2021 16:08:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-08t1608-how-to-forward-a-port-in-your-vps-with-xshell/</guid>
      <description>

&lt;h2 id=&#34;0x00-背景&#34;&gt;0x00 背景&lt;/h2&gt;

&lt;p&gt;由于命令行管理mysql数据库太不方便了，如果能用navicat管理远程服务器该多好啊，于是就有了这篇文章。&lt;/p&gt;

&lt;h2 id=&#34;0x01-过程&#34;&gt;0x01 过程&lt;/h2&gt;

&lt;p&gt;之前安装plex服务器的时候，就曾经用xshell把vps中plex服务器的端口映射回本地进行配置，那么数据库的端口啥的都是一样的，下面开始教学。&lt;/p&gt;

&lt;h3 id=&#34;1-把vps中的mysql服务端口映射到宿主机&#34;&gt;1. 把vps中的mysql服务端口映射到宿主机&lt;/h3&gt;

&lt;p&gt;由于我是使用了docker安装的mysql服务，所以需要将3306端口映射到宿主机，使用本地化安装的可以忽略这一步。&lt;/p&gt;

&lt;h3 id=&#34;2-tunnel配置&#34;&gt;2. tunnel配置&lt;/h3&gt;

&lt;p&gt;打开xshell，在会话中选择目标vps，右键属性-连接-SSH-隧道，添加。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;类型：本地拨出

//配置本地的连接
源主机：localhost
侦听端口：33066

//配置vps的连接
目标主机：localhost
目标端口：3306
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;确定保存。&lt;/p&gt;

&lt;h3 id=&#34;3-建立ssh连接之后-就可以打开navicat使用localhost-33066进行连接了&#34;&gt;3. 建立ssh连接之后，就可以打开navicat使用localhost:33066进行连接了。&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>在配置jd_seckill时如何获取eid与fp</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-07t1617-how-to-get-eid-and-fp-while-configurating-jd_seckill/</link>
      <pubDate>Sun, 07 Mar 2021 16:17:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-07t1617-how-to-get-eid-and-fp-while-configurating-jd_seckill/</guid>
      <description>

&lt;h2 id=&#34;0x00-背景&#34;&gt;0x00 背景&lt;/h2&gt;

&lt;p&gt;很久之前就知道有jd_seckill这个神器，但是一直没空弄，然后今天预约了显卡的抢购活动，就配置一下看看效果如何。&lt;/p&gt;

&lt;p&gt;在项目的配置文件中有两个字段eid和fp，不知道在哪里获取，于是百度了一下就有了这篇文章。&lt;/p&gt;

&lt;h2 id=&#34;0x01-如何获取&#34;&gt;0x01 如何获取&lt;/h2&gt;

&lt;p&gt;第一步：进入京东结算页面&lt;/p&gt;

&lt;p&gt;第二步：f12打开Sources&lt;/p&gt;

&lt;p&gt;第三步：右侧的watch，点击加号，填入_JdTdudfp&lt;/p&gt;

&lt;p&gt;即可看到_JdTdudfp:Object&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>failed to handler mux client connection 错误</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-05t1347-failed-to-handler-mux-client-connection/</link>
      <pubDate>Fri, 05 Mar 2021 13:47:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-05t1347-failed-to-handler-mux-client-connection/</guid>
      <description>

&lt;h2 id=&#34;0x00-错误描述&#34;&gt;0x00 错误描述&lt;/h2&gt;

&lt;p&gt;使用v2rayN连接节点的时候，总是会出现这个警告：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2021/03/05 13:45:52 [Warning] failed to handler mux client connection &amp;gt; v2ray.com/core/proxy/vmess/outbound: connection ends &amp;gt; v2ray.com/core/proxy/vmess/outbound: failed to read header &amp;gt; v2ray.com/core/proxy/vmess/encoding: failed to read response header &amp;gt; websocket: close 1000 (normal)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上网查了一圈，发现是节点时间与客户端时间不一致导致的。&lt;/p&gt;

&lt;h2 id=&#34;0x01-解决方案&#34;&gt;0x01 解决方案&lt;/h2&gt;

&lt;p&gt;节点是基于ubuntu搭建的，所以下面将给出ubuntu设置时区的教程：&lt;/p&gt;

&lt;h3 id=&#34;1-运行-tzselect-选择-asia-china-beijing&#34;&gt;1. 运行&lt;code&gt;tzselect&lt;/code&gt;,选择 Asia -&amp;gt; China -&amp;gt; Beijing。&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@KnobbyKindhearted-VM:~/v2ray-poseidon/docker/sspanel/ws-tls# tzselect
Please identify a location so that time zone rules can be set correctly.
Please select a continent, ocean, &amp;quot;coord&amp;quot;, or &amp;quot;TZ&amp;quot;.
 1) Africa
 2) Americas
 3) Antarctica
 4) Asia
 5) Atlantic Ocean
 6) Australia
 7) Europe
 8) Indian Ocean
 9) Pacific Ocean
10) coord - I want to use geographical coordinates.
11) TZ - I want to specify the time zone using the Posix TZ format.
#? 4
Please select a country whose clocks agree with yours.
 1) Afghanistan       18) Israel            35) Palestine
 2) Armenia       19) Japan         36) Philippines
 3) Azerbaijan        20) Jordan            37) Qatar
 4) Bahrain       21) Kazakhstan        38) Russia
 5) Bangladesh        22) Korea (North)     39) Saudi Arabia
 6) Bhutan        23) Korea (South)     40) Singapore
 7) Brunei        24) Kuwait            41) Sri Lanka
 8) Cambodia          25) Kyrgyzstan        42) Syria
 9) China         26) Laos          43) Taiwan
10) Cyprus        27) Lebanon           44) Tajikistan
11) East Timor        28) Macau         45) Thailand
12) Georgia       29) Malaysia          46) Turkmenistan
13) Hong Kong         30) Mongolia          47) United Arab Emirates
14) India         31) Myanmar (Burma)       48) Uzbekistan
15) Indonesia         32) Nepal         49) Vietnam
16) Iran          33) Oman          50) Yemen
17) Iraq          34) Pakistan
#? 9
Please select one of the following time zone regions.
1) Beijing Time
2) Xinjiang Time
#? 1

The following information has been given:

    China
    Beijing Time

Therefore TZ=&#39;Asia/Shanghai&#39; will be used.
Local time is now:  Fri Mar  5 13:46:27 CST 2021.
Universal Time is now:  Fri Mar  5 05:46:27 UTC 2021.
Is the above information OK?
1) Yes
2) No
#? 1

You can make this change permanent for yourself by appending the line
    TZ=&#39;Asia/Shanghai&#39;; export TZ
to the file &#39;.profile&#39; in your home directory; then log out and log in again.

Here is that TZ value again, this time on standard output so that you
can use the /usr/bin/tzselect command in shell scripts:
Asia/Shanghai
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-复制文件到-etc目录下-cp-usr-share-zoneinfo-asia-shanghai-etc-localtime&#34;&gt;2. 复制文件到/etc目录下&lt;code&gt;cp /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime&lt;/code&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>sspanel 与 v2ray-poseidon 环境下如何搭建一个中转节点</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-05t1556-how-to-create-a-transit-node-base-on-sspanel-and-v2ray-poseidon/</link>
      <pubDate>Fri, 05 Mar 2021 13:47:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-05t1556-how-to-create-a-transit-node-base-on-sspanel-and-v2ray-poseidon/</guid>
      <description>

&lt;h2 id=&#34;0x00-背景&#34;&gt;0x00 背景&lt;/h2&gt;

&lt;p&gt;前两天搭建了个sspanel,后端主要使用v2ray-poseidon。之前没用面板的时候，一直是使用中转节点，安装nginx来反代节点，nginx 反代节点的教程前天也发出来了，大家有兴趣也可以看看。但是那篇文章只写道了如何反代节点，而没有提到如何将这种方式与sspanle搭配使用。&lt;/p&gt;

&lt;p&gt;之前使用nginx反代节点的过程中，在sspanel遇到的问题主要是：在sspanel新建这个中转节点后，面板中总是显示灰色不可用状态，尽管将配置导入v2ray客户端是可用的。&lt;/p&gt;

&lt;p&gt;这个问题困扰了我很久，今天突然就想通了，造成这个问题的主要原因是：面板的节点ID与这个落地节点的ID不匹配，因为落地节点也作为一个独立的节点导入到了面板中，而节点ID又是自增的无法重复设置，所以就会产生这样的问题。&lt;/p&gt;

&lt;h2 id=&#34;0x01-解决过程&#34;&gt;0x01 解决过程&lt;/h2&gt;

&lt;p&gt;今天突然发现poseidon的教程中，有服务端多开v2ray的教程，于是我想，那我在这个节点开多一个v2ray实例就行啦！&lt;/p&gt;

&lt;h3 id=&#34;1-使用docker多开v2ray实例用于中转节点连接&#34;&gt;1. 使用docker多开v2ray实例用于中转节点连接&lt;/h3&gt;

&lt;p&gt;1）复制目录&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd /root/v2ray-poseidon/docker/sspanel
cp -a ws-tls ws-tls-2
cd ws-tls-2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2）修改config.json&lt;br /&gt;
配置nodeId为面板中新建的中转节点ID，然后将acceptProxyProtocol 选项值改为 true。&lt;/p&gt;

&lt;p&gt;3） 修改docker-compose.yml&lt;br /&gt;
container_name:v2ray-ws-tls-2
ports 下面的端口改成其它端口，不然会和原 v2ray-poseidon 出现端口冲突&lt;/p&gt;

&lt;p&gt;4） 启动&lt;br /&gt;
&lt;code&gt;dc up -d&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-中转节点配置&#34;&gt;2. 中转节点配置&lt;/h3&gt;

&lt;p&gt;1）安装 HAProxy&lt;br /&gt;
&lt;code&gt;yum -y install haproxy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2）修改HAProxy 配置文件&lt;br /&gt;
清空默认配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;&#39; &amp;gt; /etc/haproxy/haproxy.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;举例，现在我有个中转分配的端口为 20001，需要转发 v2ray.poseidon-gfw.cc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;frontend sg1_frontend
  bind *:20001
  default_backend sg1_server

backend sg1_server
  server s1 sg1-test-trojanp.poseidon-gfw.cc:443 send-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果需要中转多个落地机，可以复制上面的内容，比如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 这是第一个
frontend sg1_frontend
  bind *:20001
  default_backend sg1_server

backend sg1_server
  server s1 sg1-test-trojanp.poseidon-gfw.cc:443 send-proxy

# 这里是第二个
frontend jp1_frontend(这个是可以随便改的，每个中转端口一个名字，别重就行)
  bind *:20002
  default_backend jp1_server(这里必须为落地的名字， backend 后面的内容)

backend jp1_server(此处为落地的名字，可以随便改，每个落地一个名字，别重就行)
  server s1 jp1-test-trojanp.poseidon-gfw.cc:443 send-proxy

# ... ... 还可以有更多
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3）重启 HAProxy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl restart haproxy
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-sspanel面板配置&#34;&gt;3. sspanel面板配置&lt;/h3&gt;

&lt;p&gt;由于我是ws + tls，所以面板中的节点地址配置如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;落地机器ip或域名;落地机器端口;alterid;tls;ws;path=/|server=中转机器ip或域名|outside_port=中转机器端口
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面给出其他方案的节点地址配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// TCP 示例，请注意后面有两个分号
非CDN域名或者ip;非0;2;tcp;;

// WS
非CDN域名或者ip;8080;2;ws;;path=/v2ray|host=这里可以用加了CDN的域名

// WS + TLS (自动配置）
非CDN域名或者ip;非0;2;tls;ws;path=/v2ray|host=tls的域名|inside_port=10550

// WS + TLS (Caddy 提供)
非CDN域名或者ip;0;2;tls;ws;path=/v2ray|host=tls的域名|inside_port=10550|outside_port=443


// nat鸡 ws
非CDN域名或者ip;非0;2;ws;;path=/v2ray|host=这里可以用加了CDN的域名

// nat鸡 ws + tls (自动配置)，因为部分商家并不提供 80 &amp;amp; 443 访问，所以请考虑手动申请 SSL 证书
非CDN域名或者ip;非0;2;tls;ws;path=/v2ray|host=tls的域名

// nat鸡 ws + tls (Caddy 提供)，因为部分商家并不提供 80 &amp;amp; 443 访问，所以请考虑手动申请 SSL 证书
非CDN域名或者ip;0;2;tls;ws;path=/v2ray|host=tls的域名|inside_port=10550|outside_port=11120


// 以下为 KCP 示例部分，支持所有 V2Ray 的 type：

// none: 默认值，不进行伪装，发送的数据是没有特征的数据包。
非CDN域名或者ip;非0;2;kcp;noop;

// srtp: 伪装成 SRTP 数据包，会被识别为视频通话数据（如 FaceTime）。
非CDN域名或者ip;非0;2;kcp;srtp;

// utp: 伪装成 uTP 数据包，会被识别为 BT 下载数据。
非CDN域名或者ip;非0;2;kcp;utp;

// wechat-video: 伪装成微信视频通话的数据包。
非CDN域名或者ip;非0;2;kcp;wechat-video;

// dtls: 伪装成 DTLS 1.2 数据包。
非CDN域名或者ip;非0;2;kcp;dtls;

// wireguard: 伪装成 WireGuard 数据包(并不是真正的 WireGuard 协议) 。
非CDN域名或者ip;非0;2;kcp;wireguard;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;0x02-结语&#34;&gt;0x02 结语&lt;/h2&gt;

&lt;p&gt;至此，sspanel的中转节点配置就完成了，其中HAProxy换成nginx的效果应该是一样的，我还没尝试，有兴趣的朋友可以试一下。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>docker-compose 启动报错 read time out</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-04t2218-http-timeout-while-starting-docker-compose/</link>
      <pubDate>Thu, 04 Mar 2021 15:53:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-04t2218-http-timeout-while-starting-docker-compose/</guid>
      <description>

&lt;h2 id=&#34;0x00-现象&#34;&gt;0x00 现象&lt;/h2&gt;

&lt;p&gt;今晚在三毛中安装docker版的v2节点，在用docker-compose启动过程中，报了read time out 的错误，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@ruvds-4ytfy ws-tls]# dc up -d
Creating network &amp;quot;ws-tls_default&amp;quot; with the default driver
Pulling v2ray-ws-tls (v2cc/poseidon:)...
latest: Pulling from v2cc/poseidon
ba3557a56b15: Pull complete
d2371de70a8e: Pull complete
e93b600e94e9: Pull complete
Digest: sha256:627405b203b97a91d285dee998dbc8e4503b2dbe7e6fc7d1a788c81e2782f986
Status: Downloaded newer image for v2cc/poseidon:latest
Creating v2ray-ws-tls ... 

ERROR: for v2ray-ws-tls  UnixHTTPConnectionPool(host=&#39;localhost&#39;, port=None): Read timed out. (read timeout=60)

ERROR: for v2ray-ws-tls  UnixHTTPConnectionPool(host=&#39;localhost&#39;, port=None): Read timed out. (read timeout=60)
ERROR: An HTTP request took too long to complete. Retry with --verbose to obtain debug information.
If you encounter this issue regularly because of slow network conditions, consider setting COMPOSE_HTTP_TIMEOUT to a higher value (current value: 60).
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;0x01-解决方法&#34;&gt;0x01 解决方法&lt;/h2&gt;

&lt;p&gt;在docker-compose.yml的文件夹中，新建一个.env文件，新建一行：&lt;code&gt;COMPOSE_HTTP_TIMEOUT=1000&lt;/code&gt;，然后wq。&lt;br /&gt;
接着&lt;code&gt;docker down&lt;/code&gt;，再&lt;code&gt;docker up -d&lt;/code&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用Nginx代理ws&#43;tls的V2ray节点</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-03t1903-using-nginx-to-proxy-tls-ws-v2ray-node/</link>
      <pubDate>Wed, 03 Mar 2021 19:07:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-03t1903-using-nginx-to-proxy-tls-ws-v2ray-node/</guid>
      <description>

&lt;h2 id=&#34;0x00-背景&#34;&gt;0x00 背景&lt;/h2&gt;

&lt;p&gt;这两天给v2节点配上了ws+tls，但是直连的话速度还是不太理想，于是想用另一个vps中转一下，就有了这篇文章。&lt;/p&gt;

&lt;h2 id=&#34;0x01-过程&#34;&gt;0x01 过程&lt;/h2&gt;

&lt;p&gt;虽然之前也用nginx中转过v2流量，但是从没中转过使用tls的节点，都是普通的使用ws节点而已。于是上网查了很多资料，都说直接配置nginx的证书，然后v2节点就取消tls就好了，但是我又希望有时能直连一下这个节点，如果不配置tls的话，感觉又不是很放心。所以还是坚持继续探索，终于也让我找到了。&lt;/p&gt;

&lt;h2 id=&#34;0x02-解决方案&#34;&gt;0x02 解决方案&lt;/h2&gt;

&lt;p&gt;在nginx这段我没有配置ssl，所以不用配置证书啥的，就直接给出nginx的配置吧：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
        listen 中转节点监听端口;
        server_name 中转节点域名;

        location / {
            proxy_pass http://后端IP或域名:后端监听端口/wspath;  # 若后端开启tls，则需要写https://
            
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection &amp;quot;upgrade&amp;quot;;
        }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;0x03-补充说明&#34;&gt;0x03 补充说明&lt;/h2&gt;

&lt;p&gt;之前的迷糊是在于不清楚tls的工作过程，以为中转后客户端也是直接与服务端进行tls握手的，其实真实的情况是，客户端是与nginx直接连接的，而nginx才是与v2服务端握手的一方。也就是说，客户端与nginx的连接 和 nginx与v2服务端的连接是不同的两端连接，两个不同的连接均可自由配置tls。&lt;/p&gt;

&lt;h2 id=&#34;0x04-一些错误&#34;&gt;0x04 一些错误&lt;/h2&gt;

&lt;h3 id=&#34;1-nginx没配置ssl-但是v2客户端配置了tls连接造成的错误&#34;&gt;1.nginx没配置ssl，但是v2客户端配置了tls连接造成的错误&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[Warning] failed to handler mux client connection &amp;gt; v2ray.com/core/proxy/vmess/outbound: failed to find an available destination &amp;gt; v2ray.com/core/common/retry: [v2ray.com/core/transport/internet/websocket: failed to dial WebSocket &amp;gt; v2ray.com/core/transport/internet/websocket: failed to dial to (wss://HOST:PORT/):  &amp;gt; tls: first record does not look like a TLS handshake] &amp;gt; v2ray.com/core/common/retry: all retry attempts failed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决方案：&lt;br /&gt;
将v2客户端的tls连接去掉即可。&lt;/p&gt;

&lt;h3 id=&#34;2-客户端保留了-伪装域名-也就是host字段保留了cdn的域名造成的错误&#34;&gt;2.客户端保留了“伪装域名”也就是host字段保留了cdn的域名造成的错误&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[Warning] failed to handler mux client connection &amp;gt; v2ray.com/core/proxy/vmess/outbound: failed to find an available destination &amp;gt; v2ray.com/core/common/retry: [v2ray.com/core/transport/internet/websocket: failed to dial WebSocket &amp;gt; v2ray.com/core/transport/internet/websocket: failed to dial to (ws://HOST:PORT/): 404 Not Found &amp;gt; websocket: bad handshake] &amp;gt; v2ray.com/core/common/retry: all retry attempts failed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决方案：&lt;br /&gt;
将客户端中的host字段清空去掉就好了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vi 的一些基本操作</title>
      <link>http://blog.sinowrt.cn/2021/2021-02-26t1740-basic-operation-in-vi/</link>
      <pubDate>Fri, 26 Feb 2021 17:40:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-02-26t1740-basic-operation-in-vi/</guid>
      <description>

&lt;h2 id=&#34;0x00-基本操作&#34;&gt;0x00 基本操作&lt;/h2&gt;

&lt;h3 id=&#34;1-查找&#34;&gt;1.查找&lt;/h3&gt;

&lt;p&gt;命令模式下，\ + 关键字&lt;/p&gt;

&lt;h3 id=&#34;2-显示行号&#34;&gt;2.显示行号&lt;/h3&gt;

&lt;p&gt;命令模式下, :set number&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>