<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>V2ray on Sinowrt</title>
    <link>http://blog.sinowrt.cn/categories/v2ray/</link>
    <description>Recent content in V2ray on Sinowrt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Mar 2021 13:47:00 +0800</lastBuildDate>
    
	<atom:link href="http://blog.sinowrt.cn/categories/v2ray/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>failed to handler mux client connection 错误</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-05t1347-failed-to-handler-mux-client-connection/</link>
      <pubDate>Fri, 05 Mar 2021 13:47:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-05t1347-failed-to-handler-mux-client-connection/</guid>
      <description>0x00 错误描述 使用v2rayN连接节点的时候，总是会出现这个警告：
2021/03/05 13:45:52 [Warning] failed to handler mux client connection &amp;gt; v2ray.com/core/proxy/vmess/outbound: connection ends &amp;gt; v2ray.com/core/proxy/vmess/outbound: failed to read header &amp;gt; v2ray.com/core/proxy/vmess/encoding: failed to read response header &amp;gt; websocket: close 1000 (normal)  上网查了一圈，发现是节点时间与客户端时间不一致导致的。
0x01 解决方案 节点是基于ubuntu搭建的，所以下面将给出ubuntu设置时区的教程：
1. 运行tzselect,选择 Asia -&amp;gt; China -&amp;gt; Beijing。 root@KnobbyKindhearted-VM:~/v2ray-poseidon/docker/sspanel/ws-tls# tzselect Please identify a location so that time zone rules can be set correctly. Please select a continent, ocean, &amp;quot;coord&amp;quot;, or &amp;quot;TZ&amp;quot;. 1) Africa 2) Americas 3) Antarctica 4) Asia 5) Atlantic Ocean 6) Australia 7) Europe 8) Indian Ocean 9) Pacific Ocean 10) coord - I want to use geographical coordinates.</description>
    </item>
    
    <item>
      <title>sspanel 与 v2ray-poseidon 环境下如何搭建一个中转节点</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-05t1556-how-to-create-a-transit-node-base-on-sspanel-and-v2ray-poseidon/</link>
      <pubDate>Fri, 05 Mar 2021 13:47:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-05t1556-how-to-create-a-transit-node-base-on-sspanel-and-v2ray-poseidon/</guid>
      <description>0x00 背景 前两天搭建了个sspanel,后端主要使用v2ray-poseidon。之前没用面板的时候，一直是使用中转节点，安装nginx来反代节点，nginx 反代节点的教程前天也发出来了，大家有兴趣也可以看看。但是那篇文章只写道了如何反代节点，而没有提到如何将这种方式与sspanle搭配使用。
之前使用nginx反代节点的过程中，在sspanel遇到的问题主要是：在sspanel新建这个中转节点后，面板中总是显示灰色不可用状态，尽管将配置导入v2ray客户端是可用的。
这个问题困扰了我很久，今天突然就想通了，造成这个问题的主要原因是：面板的节点ID与这个落地节点的ID不匹配，因为落地节点也作为一个独立的节点导入到了面板中，而节点ID又是自增的无法重复设置，所以就会产生这样的问题。
0x01 解决过程 今天突然发现poseidon的教程中，有服务端多开v2ray的教程，于是我想，那我在这个节点开多一个v2ray实例就行啦！
1. 使用docker多开v2ray实例用于中转节点连接 1）复制目录
cd /root/v2ray-poseidon/docker/sspanel cp -a ws-tls ws-tls-2 cd ws-tls-2  2）修改config.json
配置nodeId为面板中新建的中转节点ID，然后将acceptProxyProtocol 选项值改为 true。
3） 修改docker-compose.yml
container_name:v2ray-ws-tls-2 ports 下面的端口改成其它端口，不然会和原 v2ray-poseidon 出现端口冲突
4） 启动
dc up -d
2. 中转节点配置 1）安装 HAProxy
yum -y install haproxy
2）修改HAProxy 配置文件
清空默认配置
echo &#39;&#39; &amp;gt; /etc/haproxy/haproxy.cfg  举例，现在我有个中转分配的端口为 20001，需要转发 v2ray.poseidon-gfw.cc
frontend sg1_frontend bind *:20001 default_backend sg1_server backend sg1_server server s1 sg1-test-trojanp.poseidon-gfw.cc:443 send-proxy  如果需要中转多个落地机，可以复制上面的内容，比如</description>
    </item>
    
    <item>
      <title>使用Nginx代理ws&#43;tls的V2ray节点</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-03t1903-using-nginx-to-proxy-tls-ws-v2ray-node/</link>
      <pubDate>Wed, 03 Mar 2021 19:07:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-03t1903-using-nginx-to-proxy-tls-ws-v2ray-node/</guid>
      <description>0x00 背景 这两天给v2节点配上了ws+tls，但是直连的话速度还是不太理想，于是想用另一个vps中转一下，就有了这篇文章。
0x01 过程 虽然之前也用nginx中转过v2流量，但是从没中转过使用tls的节点，都是普通的使用ws节点而已。于是上网查了很多资料，都说直接配置nginx的证书，然后v2节点就取消tls就好了，但是我又希望有时能直连一下这个节点，如果不配置tls的话，感觉又不是很放心。所以还是坚持继续探索，终于也让我找到了。
0x02 解决方案 在nginx这段我没有配置ssl，所以不用配置证书啥的，就直接给出nginx的配置吧：
server { listen 中转节点监听端口; server_name 中转节点域名; location / { proxy_pass http://后端IP或域名:后端监听端口/wspath; # 若后端开启tls，则需要写https:// proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &amp;quot;upgrade&amp;quot;; } }  0x03 补充说明 之前的迷糊是在于不清楚tls的工作过程，以为中转后客户端也是直接与服务端进行tls握手的，其实真实的情况是，客户端是与nginx直接连接的，而nginx才是与v2服务端握手的一方。也就是说，客户端与nginx的连接 和 nginx与v2服务端的连接是不同的两端连接，两个不同的连接均可自由配置tls。
0x04 一些错误 1.nginx没配置ssl，但是v2客户端配置了tls连接造成的错误 [Warning] failed to handler mux client connection &amp;gt; v2ray.com/core/proxy/vmess/outbound: failed to find an available destination &amp;gt; v2ray.com/core/common/retry: [v2ray.com/core/transport/internet/websocket: failed to dial WebSocket &amp;gt; v2ray.</description>
    </item>
    
    <item>
      <title>如何生成VMESS URL并发布订阅</title>
      <link>http://blog.sinowrt.cn/2020/2020-12-01t2202-how-to-generate-vmess-urls-and-public-as-subscription/</link>
      <pubDate>Tue, 01 Dec 2020 22:02:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-12-01t2202-how-to-generate-vmess-urls-and-public-as-subscription/</guid>
      <description>0x00 获得VMESS URL 我使用的是V2rayN客户端，直接全选所有节点，然后批量导出分享URL到剪切板即可
0x01 发布订阅信息 订阅信息实际上就是将VMESS URL（每个URL以回车符分隔）进行Base64加密，得到密文做成纯text网页，随便丢到一个安装了apache或nginx服务的服务器即可
测试方法：在浏览器输入该订阅的网址，能访问到完整的Base64密文即可
0x02 发布quantumult订阅信息 quantumult的订阅信息格式跟V2rayN的不太一样，在这里我还踩了一个小坑，且听我详细道来
这里要用到一个小工具，将V2rayN的vmess url转成符合Quantumult格式的vmess url
这是示例的vmess url vmess://ew0KICAidiI6ICIyIiwNCiAgInBzIjogIuekuuS+iyIsDQogICJhZGQiOiAiMTkyLjE2OC4xLjEiLA0KICAicG9ydCI6ICI0MzIxIiwNCiAgImlkIjogImQ3NzFkODlhLTliZWQtNDc2Ny1hNjlkLTE5NjJkY2MyZTY3YyIsDQogICJhaWQiOiAiNjQiLA0KICAibmV0IjogIndzIiwNCiAgInR5cGUiOiAibm9uZSIsDQogICJob3N0IjogIiIsDQogICJwYXRoIjogIi9leGFtcGxlIiwNCiAgInRscyI6ICIiDQp9
使用小工具转换之后的Quantumult vmess url为
vmess://56S65L6LID0gdm1lc3MsMTkyLjE2OC4xLjEsNDMyMSxub25lLCJkNzcxZDg5YS05YmVkLTQ3NjctYTY5ZC0xOTYyZGNjMmU2N2MiLG92ZXItdGxzPWZhbHNlLHRscy1ob3N0PSxjZXJ0aWZpY2F0ZT0xLG9iZnM9d3Msb2Jmcy1wYXRoPSIvZXhhbXBsZSJvYmZzLWhlYWRlcj0iSG9zdDoi
首先，比较一下V2rayN和Quantumult的vmess url,两者看似非常相似，除了vmess://相同之外完全不一样。可是你说它不一样吧，它也没个规律比较啥也无从下手
既然订阅密文是将vmess url 通过base64加密之后得到的，那么vmess://后面这一串东西是不是也是通过base64加密得到的密文呢，那就解密试试吧
这是V2rayN的Vmess://后一串密文解密的结果
{ &amp;quot;v&amp;quot;: &amp;quot;2&amp;quot;, &amp;quot;ps&amp;quot;: &amp;quot;示例&amp;quot;, &amp;quot;add&amp;quot;: &amp;quot;192.168.1.1&amp;quot;, &amp;quot;port&amp;quot;: &amp;quot;4321&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;d771d89a-9bed-4767-a69d-1962dcc2e67c&amp;quot;, &amp;quot;aid&amp;quot;: &amp;quot;64&amp;quot;, &amp;quot;net&amp;quot;: &amp;quot;ws&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;none&amp;quot;, &amp;quot;host&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;/example&amp;quot;, &amp;quot;tls&amp;quot;: &amp;quot;&amp;quot; }  这是Quantumult的Vmess://后一串密文解密的结果
示例 = vmess,192.168.1.1,4321,none,&amp;quot;d771d89a-9bed-4767-a69d-1962dcc2e67c&amp;quot;,over-tls=false,tls-host=,certificate=1,obfs=ws,obfs-path=&amp;quot;/example&amp;quot;obfs-header=&amp;quot;Host:&amp;quot;  通过比较，vmess://后面是base64加密的密文实锤了
可是将这个vmess url追加到原有的url列表时，Quantumult却只能识别先前的url，而这个追加的无论是单独设为订阅，或是与原来的url一起设为订阅，都无法识别
更神奇的是，小工具生成Quantumult订阅url时，会同时生成二维码，使用Quantumult应用扫描这个二维码，或者复制这个url通过剪贴板导入的方式，都可以成功识别并添加该服务器
既然如此，那我们就看看这个Quantumult与原有的url列表中的服务器有什么不一样
新的Quantumult vmess url
示例 = vmess,192.168.1.1,4321,none,&amp;quot;d771d89a-9bed-4767-a69d-1962dcc2e67c&amp;quot;,over-tls=false,tls-host=,certificate=1,obfs=ws,obfs-path=&amp;quot;/example&amp;quot;obfs-header=&amp;quot;Host:&amp;quot;  旧列表中的Quantumult vmess url</description>
    </item>
    
  </channel>
</rss>