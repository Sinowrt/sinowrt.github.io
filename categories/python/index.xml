<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Sinowrt</title>
    <link>http://blog.sinowrt.cn/categories/python/</link>
    <description>Recent content in python on Sinowrt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 May 2022 21:45:00 +0800</lastBuildDate>
    
	<atom:link href="http://blog.sinowrt.cn/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>巧用IOS的BLE实现上下班打卡提醒（Python实现）</title>
      <link>http://blog.sinowrt.cn/2022/2022-05-03t2145-using-ios-ble-to-remind-me-clock-inpython-implement/</link>
      <pubDate>Tue, 03 May 2022 21:45:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2022/2022-05-03t2145-using-ios-ble-to-remind-me-clock-inpython-implement/</guid>
      <description>0x00 背景 因为公司使用刷脸打卡，这就导致有时候打了卡，却突然失忆，忘了自己有没有打卡；或者直接就忘了打卡，并且也忘了自己有没有打卡。这几种情况都实实在在发生过的，上个班还要时时刻刻去回忆有没有打卡实在是非常痛苦的一件事。所以一直就想做一个提醒打卡的小程序。
0x01 设想的几种方案 第一种方案，是基于IOS快捷指令的自动化功能，设置到达或者离开目的地的提醒，但是这个自动化的方式非常鸡肋，一个是触发之后，还要手动点运行；二是到达或离开目的地根本就不提醒，反而是每次走到定位地址外的一个准确位置，反而又会准确提醒，不知道是不是地图位置有偏移还是咋滴。
第二种方案是想起之前阿里公众号中的一篇文章，就讲到在外卖取餐的场景中，如何准确识别外卖小哥到店取餐的解决方案，这给了我很大的启发，该场景跟我上下班的场景很是契合，只要在到店（到公司上班）识别的基础上，加上离店（下班回家）识别的功能即可。开干！
0x02 资料收集 遵循不重复造轮子原则，我首先在网上搜集了一下相关的信息，看看有没有现成的方案。
首先在知乎找到了《总是忘打卡？用iBeacon提醒你!》这篇文章，作者在万能淘宝上购买的iBeacon信标，使用Python搭配pybluez库探测iBeacon信号，根据iBeacon信号的消失或者出现来判断作者上班与下班的状态。
但是据了解，iPhone是会持续向外发射BLE信号的，既然有现成的信号源，就不用买万能淘宝的iBeacon信标了。
因为iPhone的BLE广播的是随机地址，那么要如何唯一确定该随机地址是我的设备呢? 首先我们要知道随机地址是什么意思，随机地址是蓝牙核心规范中的一个词条，那么在蓝牙核心规范中必然会有&amp;rdquo;随机地址&amp;rdquo;的定义和描述。
下载蓝牙核心规范5.3
0x03 实现方案 根据蓝牙核心规范5.3中[Vol 6] Part B, Section 1.3.2.3的描述，可解析随机地址（iPhone BLE使用的正是可解析随机地址）可以使用设备配对过程中产生的IRK进行解析
 将IRK以及随机地址的前24位prand作为输入，然后prand需要补齐128位变为r&amp;rsquo; 使用[Vol 3] Part H, Section 2.2.2的ah哈希函数，进行ah(IRK,r&amp;rsquo;)，ah函数实际上就是(NIST Publication FIPS-197)[https://csrc.nist.gov/csrc/media/publications/fips/197/final/documents/fips-197.pdf]中描述的AES-128加密，IRK作为key，r&#39;作为plaintext 取ah哈希运算结果的最后24位，跟随机地址的后24位进行比较，若一样则可判断为同一设备。  0x04 运行环境的选择 我脑海中最先想到的是树莓派，作为一个wifi 蓝牙 有线功能完备，软件支持完整，即插即用，并且技术成熟的ARM设备，确实是实现各种小功能的首选设备。
等等，为什么不在windows中实现呢？我的办公电脑又是24小时开机的，少维护一个设备多香啊。但是在实现的过程中发现pybluez的库在windows平台上并不支持BLE。。。但是万能的GayHub说：pybluez不行我这还有pysimpleble，尽管文档少，又不是不能用对吧。
0x05 获取IRK 既然随机地址是根据IRK来解析的，那首先就要获取到一个IRK。
首先，需要一个支持BLE的蓝牙适配器（我两台电脑蓝牙适配器可能因为不支持BLE配对，只能获取到Linkkey），以及Win10系统环境。
将电脑与手机进行配对，配对完成后，打开设备管理器，找到iPhone的蓝牙LE设备，打开属性窗口的事件选项卡，在信息栏记录蓝牙LE设备的设备号（如图5.1）
下载(PsTools)[https://docs.microsoft.com/en-us/sysinternals/downloads/psexec]解压,使用管理员权限打开CMD，cd到解压好的PsTools根目录，执行命令
# 64位操作系统执行以下命令 PsExec64.exe -si regedit # 32位操作系统执行以下命令 PsExec.exe -si regedit  执行命令后会打开注册表窗口，在左侧找到HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\BTHPORT\Parameters\Keys\目录(如图 5.2)
第一层目录是本机蓝牙Mac地址，在第二层目录中找到设备管理器中记录下的设备号，点击该目录，记录右侧窗口的IRK秘钥串
PS：如果有 ESP32 开发板，可以烧录Decoding-Random-Bluetooth-Address项目的get_irk - esp32_irk.ino，再使用手机跟ESP32配对，在串口监视器中即可看到打印出来的IRK。
另外，Decoding-Random-Bluetooth-Address这个项目中的nrf_ble_add文件夹中，有C语实现的程序，可以用来研究随机地址与irk匹配的具体算法，我仅参考了ah函数的具体实现过程，因为项目跑起来的发现随机地址和irk的匹配结果不对。
0x06 位置判断实现篇 ## 随机地址校验器 class RandomAddressValidator(object): def __init__(self): self.</description>
    </item>
    
    <item>
      <title>用python下载七牛云的图片并批量重命名</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-10t1451-using-python-to-download-pictures-from-qiniu-and-batch-rename/</link>
      <pubDate>Wed, 10 Mar 2021 14:51:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-10t1451-using-python-to-download-pictures-from-qiniu-and-batch-rename/</guid>
      <description>0x00 背景 最近想要搭建一个对象存储服务，并把原本在七牛云上面的图片全部转移到该服务中管理，但是七牛云上面的图片命名本来就很乱，不符合批量管理的要求，所以不能从七牛云直接下载，而是要把图片名格式化一下，再下载下来，这种工作，用python是最适合不过了，于是就有了这篇文章。
0x01 过程 1. 命名规则转换 原本图片的命名是images/1979-01-01T0000/1.png这样的格式，现在要统一放在一个文件夹，所以需要去掉images文件夹，并把时间和图片名通过&amp;rdquo;-&amp;ldquo;拼接起来。
2. 将七牛云上面的文件名及其对应的url列表导出 这一步可以直接在七牛云上面批量操作，导出的文件是是csv格式的，所以在python中可以使用csv库直接进行读取
3. 编写代码 import requests import csv def download_img(img_url, api_token, name): print (img_url) header = {&amp;quot;Authorization&amp;quot;: &amp;quot;Bearer &amp;quot; + api_token} # 设置http header，视情况加需要的条目，这里的token是用来鉴权的一种方式 r = requests.get(img_url, headers=header, stream=True) print(r.status_code) # 返回状态码 if r.status_code == 200: open(&#39;C:\\Users\\Jacky\\Pictures\\blogpic\\&#39; + name, &#39;wb&#39;).write(r.content) # 将内容写入图片 print(&amp;quot;done&amp;quot;) del r if __name__ == &#39;__main__&#39;: api_token = &amp;quot;apitoken&amp;quot; record = csv.reader(open(&#39;urls&#39;, &#39;r&#39;, encoding=&#39;utf-8-sig&#39;)) for i in record: name = i[0] # 改名 name = name[7:].</description>
    </item>
    
    <item>
      <title>在配置jd_seckill时如何获取eid与fp</title>
      <link>http://blog.sinowrt.cn/2021/2021-03-07t1617-how-to-get-eid-and-fp-while-configurating-jd_seckill/</link>
      <pubDate>Sun, 07 Mar 2021 16:17:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2021/2021-03-07t1617-how-to-get-eid-and-fp-while-configurating-jd_seckill/</guid>
      <description>0x00 背景 很久之前就知道有jd_seckill这个神器，但是一直没空弄，然后今天预约了显卡的抢购活动，就配置一下看看效果如何。
在项目的配置文件中有两个字段eid和fp，不知道在哪里获取，于是百度了一下就有了这篇文章。
0x01 如何获取 第一步：进入京东结算页面
第二步：f12打开Sources
第三步：右侧的watch，点击加号，填入_JdTdudfp
即可看到_JdTdudfp:Object</description>
    </item>
    
    <item>
      <title>python3.8 在安装 python-docx 时提示未安装libxml2</title>
      <link>http://blog.sinowrt.cn/2020/2020-07-22t1231-could-not-find-function-xmlcheckversion-in-library-libxml2.-while-installing-python-docx/</link>
      <pubDate>Wed, 22 Jul 2020 12:31:00 +0800</pubDate>
      
      <guid>http://blog.sinowrt.cn/2020/2020-07-22t1231-could-not-find-function-xmlcheckversion-in-library-libxml2.-while-installing-python-docx/</guid>
      <description>因为Anaconda3的python环境在pyinstaller打包的时候，会把整个数学运算库打包进来，使整个程序体积达到300M以上，在分析程序运行时加载的动态链接库时，发现这些库在运行过程中都没有使用，虽然可以手动删除这些库，但是每次打包好了都要手动删除未免过于繁琐，所以打算把python切换一下，由于电脑里面之前已经安装了python3.8，所以只需要吧Anaconda3的环境取消激活就可以了。
但是项目中所用到的一些包，都要重新安装一遍了。其中就包括python-docx这个模块，在安装的过程中报了Could not find function xmlCheckVersion in library libxml2. Is libxml2 installed?这个错误。百度了一下，是缺少lxml引起的，需要到https://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml下载你所安装python版本的对应whl包，由于我的python是windows下的64位版本，于是我就下载了lxml‑4.5.2‑cp38‑cp38‑win_amd64.whl。
下载完成后，只需cd到该whl包的路径上，执行pip install lxml‑4.5.2‑cp38‑cp38‑win_amd64.whl就可以了。但是在安装的过程中却又出了点状况，提示lxml-4.5.2-cp38-cp38-win32.whl is not a supported wheel on this platform.，百度发现是包名有问题，在python控制台中输入import pip._internal; print(pip._internal.pep425tags.get_supported())
可以看到
[(&#39;cp38&#39;, &#39;cp38m&#39;, &#39;win_amd64&#39;), (&#39;cp38&#39;, &#39;none&#39;, &#39;win_amd64&#39;), (&#39;py3&#39;, &#39;none&#39;, &#39;win_amd64&#39;), (&#39;cp38&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;cp3&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py38&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py3&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py37&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py36&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py35&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py34&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py33&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py32&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py31&#39;, &#39;none&#39;, &#39;any&#39;), (&#39;py30&#39;, &#39;none&#39;, &#39;any&#39;)]  按照第一个参数可知，将文件名修改为lxml‑4.</description>
    </item>
    
  </channel>
</rss>